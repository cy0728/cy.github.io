<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小逸的博客</title>
  
  <subtitle>小逸的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-28T02:39:00.917Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>小逸</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS3</title>
    <link href="http://yoursite.com/2019/07/26/CSS3/"/>
    <id>http://yoursite.com/2019/07/26/CSS3/</id>
    <published>2019-07-25T16:00:00.000Z</published>
    <updated>2020-04-28T02:39:00.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS3简介"><a href="#CSS3简介" class="headerlink" title="CSS3简介"></a>CSS3简介</h1><blockquote><p> 如同人类的的进化一样，CSS3是CSS2的“进化”版本，在CSS2基础上，<strong>增强</strong> 或<strong>新增</strong> 了许多特性， 弥补了CSS2的众多不足之处，使得Web开发变得更为高效和便捷。 </p></blockquote><h2 id="CSS3的现状"><a href="#CSS3的现状" class="headerlink" title="CSS3的现状"></a>CSS3的现状</h2><ul><li>PC端浏览器支持程度差，需要添加私有前缀</li><li>移动端支持优于PC端</li><li>不断改进中</li><li>应用相对广泛</li></ul><p>关于私有前缀：</p><blockquote><p>在标准还未确定时，部分浏览器已经根据最初草案实现了部分功能，为了与之后确定下来的标准进行兼容，所以每种浏览器使用了自己的私有前缀与标准进行区分，当标准确立后，各大浏览器将逐步支持不带前缀的css3新属性</p><p>目前已有很多私有前缀可以不写了，但为了兼容老版本的浏览器，可以仍沿用私有前缀和标准方法，逐渐过渡。</p><p>一般来说，移动端更新迭代很快，对CSS3支持良好, 因此我们在移动端没必要写太多的前缀，因为移动端的ios和Android的浏览器都是webkit内核。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">谷歌、苹果浏览器：-webkit-</span><br><span class="line">火狐浏览器：-moz-</span><br><span class="line">IE浏览器：-ms-</span><br><span class="line">欧朋浏览器：-o-</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*谷歌浏览器和safari浏览器的前缀 -webkit-*/</span></span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">    <span class="comment">/*火狐浏览器的前缀 -moz-*/</span></span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">    <span class="comment">/*ie浏览器的前缀 -ms-*/</span></span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">    <span class="comment">/*opera浏览器的前缀 -o-*/</span></span><br><span class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">    <span class="comment">/*规范化后的写法*/</span></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【css3初体验】</p><h1 id="CSS3选择器"><a href="#CSS3选择器" class="headerlink" title="CSS3选择器"></a>CSS3选择器</h1><h2 id="关系选择器"><a href="#关系选择器" class="headerlink" title="关系选择器"></a>关系选择器</h2><p><img src="/" class="lazyload" data-src="images/s1.png"  alt="img"></p><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p><img src="/" class="lazyload" data-src="images/s2.png"  alt="img"></p><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><blockquote><p>伪类选择器的语法：都带有一个 冒号 <code>:</code></p></blockquote><h3 id="child系列（重点）"><a href="#child系列（重点）" class="headerlink" title="child系列（重点）"></a>child系列（重点）</h3><p><img src="/" class="lazyload" data-src="images/s3.png"  alt="img"></p><p>思考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 第一列变成红色</span><br><span class="line">2. 最后一列变成红色</span><br><span class="line">3. 倒数第二列变成红色</span><br></pre></td></tr></table></figure><h3 id="其他伪类选择器"><a href="#其他伪类选择器" class="headerlink" title="其他伪类选择器"></a>其他伪类选择器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">:of-type系列，  用法与child系列很像，但是找的是子元素中对应类型的下标（了解，用的不多）</span><br><span class="line">:focus    查找获取到焦点的文本框</span><br><span class="line">:checked 获得选中的checkbox</span><br><span class="line">:disabled 获得不可用的框</span><br><span class="line">:enabled 获得可用的框</span><br><span class="line">:not(selector)选择不匹配selector的那些元素</span><br><span class="line">:target  获取当前活跃的锚链接</span><br></pre></td></tr></table></figure><h2 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h2><h3 id="before和after"><a href="#before和after" class="headerlink" title="before和after"></a>before和after</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">注意事项：</span><br><span class="line">&#x2F;&#x2F;1.    必须指定content属性，可以在content属性中写入文本内容，但是通常为空字符串。</span><br><span class="line">&#x2F;&#x2F;2.    默认是行内元素，无法设置宽高，需要指定display:block或者position:absolute</span><br><span class="line">E::before :在元素子节点的最前面添加一个内容。</span><br><span class="line">E::after  :在元素子节点的最后面添加一个内容。</span><br></pre></td></tr></table></figure><p>关于单冒号和双冒号问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">关于:before与::before的区别</span><br><span class="line">:before是css2中伪元素的写法，但是呢，在css3中严格规定，伪类采用单冒号，伪元素需要使用双冒号。为了兼容旧的代码，当浏览器碰到了:before之后，会自动的转换成::before。</span><br><span class="line">如果需要兼容老的浏览器，比如IE678，推荐使用:before</span><br><span class="line">如果不需要兼容老的浏览器，比如移动端，推荐使用::before</span><br></pre></td></tr></table></figure><h3 id="其他伪元素选择器"><a href="#其他伪元素选择器" class="headerlink" title="其他伪元素选择器"></a>其他伪元素选择器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">::first-letter  :获取元素的第一个字符</span><br><span class="line">::first-line   :获取元素的第一行</span><br><span class="line">::selection   ：获取选中的元素</span><br></pre></td></tr></table></figure><h1 id="CSS3阴影"><a href="#CSS3阴影" class="headerlink" title="CSS3阴影"></a>CSS3阴影</h1><h2 id="如何查看css3文档"><a href="#如何查看css3文档" class="headerlink" title="如何查看css3文档"></a>如何查看css3文档</h2><p>学会使用工具，可以让我们事半功倍。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[]        表示全部可选项</span><br><span class="line">||        表示或者</span><br><span class="line">|        表示多选一</span><br><span class="line">？       表示0个或者1个</span><br><span class="line">*        表示0个或者多个</span><br><span class="line">&#123;2,3&#125;        表示范围</span><br></pre></td></tr></table></figure><h2 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h2><blockquote><p>text-shadow:文字阴影</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法： text-shadow：水平偏移 垂直偏移 羽化大小 颜色</span><br></pre></td></tr></table></figure><h2 id="边框阴影"><a href="#边框阴影" class="headerlink" title="边框阴影"></a>边框阴影</h2><blockquote><p>box-shadow:边框阴影</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">none： 无阴影 </span><br><span class="line">&lt;length&gt;：第1个长度值用来设置对象的阴影水平偏移值。可以为负值 </span><br><span class="line">&lt;length&gt;：第2个长度值用来设置对象的阴影垂直偏移值。可以为负值 </span><br><span class="line">&lt;length&gt;：如果提供了第3个长度值则用来设置对象的阴影模糊值。不允许负值 </span><br><span class="line">&lt;length&gt;：如果提供了第4个长度值则用来设置对象的阴影外延值。可以为负值 </span><br><span class="line">&lt;color&gt;：设置对象的阴影的颜色。 </span><br><span class="line">inset：设置对象的阴影类型为内阴影。该值为空时，则对象的阴影类型为外阴影</span><br></pre></td></tr></table></figure><h1 id="CSS3背景"><a href="#CSS3背景" class="headerlink" title="CSS3背景"></a>CSS3背景</h1><blockquote><p>在css2中已经有background属性了，用于设置盒子的背景相关的一些样式，在CSS3中新增加了几个背景相关的几个属性。</p></blockquote><h2 id="background-size"><a href="#background-size" class="headerlink" title="background-size"></a>background-size</h2><blockquote><p>用户设置背景图片的尺寸大小</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意：这两种设置方式会导致图片失真。</span></span><br><span class="line"><span class="comment">/*background-size:设置背景图片的大小*/</span></span><br><span class="line">background-size: <span class="number">600</span>px <span class="number">400</span>px;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 百分比是相对于盒子自身的宽度和高度 */</span></span><br><span class="line">background-size: <span class="number">100</span>% <span class="number">100</span>%;</span><br></pre></td></tr></table></figure><p>不失真的设置方式（等比例缩放）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*containe保证等比例缩放,但是会出现留白*/</span></span><br><span class="line">background-size: contain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*cover保证等比例缩放,并且不会留白，但是出现有一部分图片不显示*/</span></span><br><span class="line">background-size: cover;</span><br></pre></td></tr></table></figure><p>【演示：01-background-size的使用.html】</p><p>【案例：02-全屏背景.html】</p><h2 id="background-clip"><a href="#background-clip" class="headerlink" title="background-clip"></a>background-clip</h2><blockquote><p>设置背景区域的大小</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*盒子的背景区域是整个盒子，包括边框和padding*/</span></span><br><span class="line"><span class="comment">/*默认值，设置背景区域包括了边框*/</span></span><br><span class="line">background-clip: border-box;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*背景区域只包含padding和content*/</span></span><br><span class="line">background-clip: padding-box;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*背景区域只包含content*/</span></span><br><span class="line">background-clip: content-box;</span><br></pre></td></tr></table></figure><p>【演示：03-background-clip.html】</p><h2 id="background-origin"><a href="#background-origin" class="headerlink" title="background-origin"></a>background-origin</h2><blockquote><p>设置背景图片的原点的位置，默认是padding的地方开始</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">background-image: url(images/bg.jpg);</span><br><span class="line"><span class="comment">/*设置原点从border开始*/</span></span><br><span class="line">background-origin: border-box;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置原点从padding开始,默认值*/</span></span><br><span class="line">background-origin: padding-box;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置原点从content开始*/</span></span><br><span class="line">background-origin: content-box;</span><br></pre></td></tr></table></figure><p>【演示：04-background-origin.html】</p><h2 id="多重背景"><a href="#多重背景" class="headerlink" title="多重背景"></a>多重背景</h2><blockquote><p>background设置背景的时候，可以设置多个背景图片，使用逗号隔开。注意颜色只能设置一次，并且通常来说，颜色都是在最后面进行设置。</p><p>background是一个合写的属性，如果在background之前设置了background相关的样式，会被覆盖掉。</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background: url(images/mn1.jpg) no-repeat top left, url("images/mn2.jpg") no-repeat right bottom, pink;</span><br></pre></td></tr></table></figure><p>【多重背景-语法.html】</p><p>【多重背景-小泡泡.html】</p><p>【多重背景的应用.html】</p><h1 id="CSS3渐变"><a href="#CSS3渐变" class="headerlink" title="CSS3渐变"></a>CSS3渐变</h1><h2 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h2><blockquote><p>linear-gradient指沿着某条直线朝一个方向产生的渐变效果。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意：渐变实际上相当与一张图片，因为需要加给background-image才会生效</span></span><br><span class="line"><span class="comment">//渐变的两个要求：有区间，有颜色变化。</span></span><br><span class="line"><span class="comment">//最简单的渐变</span></span><br><span class="line">background-image: linear-gradient(red, green);</span><br><span class="line"><span class="comment">//设定渐变的方向</span></span><br><span class="line">background-image: linear-gradient(to right, red, green);</span><br><span class="line"><span class="comment">//也可以设定渐变的角度</span></span><br><span class="line">background-image: linear-gradient(<span class="number">45</span>deg, red, green);</span><br><span class="line"><span class="comment">//设定渐变的范围</span></span><br><span class="line">background-image: linear-gradient(to right, red <span class="number">20</span>%, green <span class="number">80</span>%)</span><br><span class="line"><span class="comment">//每一个区间表示渐变颜色的范围</span></span><br><span class="line">background-image: linear-gradient(to right, red <span class="number">20</span>%, green <span class="number">20</span>%)</span><br></pre></td></tr></table></figure><p>【演示：01-渐变-线性渐变.html】</p><p>【演示：02-导航按钮.html】</p><p>【案例：03-渐变-案例-发廊效果.html】</p><h2 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h2><blockquote><p>radial-gradient指从一个中心点开始沿着四周产生渐变效果</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*1. 最简单的渐变*/</span></span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">radial-gradient</span>(<span class="selector-tag">red</span>, <span class="selector-tag">green</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*2. 指定圆的半径和圆心*/</span></span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">radial-gradient</span>(200<span class="selector-tag">px</span> <span class="selector-tag">at</span> <span class="selector-tag">center</span>, <span class="selector-tag">red</span>, <span class="selector-tag">green</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*3. 指定椭圆*/</span></span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">radial-gradient</span>(200<span class="selector-tag">px</span> 80<span class="selector-tag">px</span> <span class="selector-tag">at</span> <span class="selector-tag">center</span>, <span class="selector-tag">red</span>, <span class="selector-tag">green</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*4. 指定范围*/</span></span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">radial-gradient</span>(200<span class="selector-tag">px</span> <span class="selector-tag">at</span> <span class="selector-tag">center</span>, <span class="selector-tag">green</span> 50%, <span class="selector-tag">red</span> 50%);</span><br></pre></td></tr></table></figure><h1 id="CSS3盒子模型"><a href="#CSS3盒子模型" class="headerlink" title="CSS3盒子模型"></a>CSS3盒子模型</h1><blockquote><p>CSS3中可以通过box-sizing 来指定盒模型，即可指定为content-box、border-box，这样我们计算盒子大小的方式就发生了改变。</p></blockquote><p>可以分成两种情况： </p><ul><li>box-sizing: border-box 计算方式为content = width – border - padding </li><li>box-sizing: content-box 计算方式为content = width</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CSS3简介&quot;&gt;&lt;a href=&quot;#CSS3简介&quot; class=&quot;headerlink&quot; title=&quot;CSS3简介&quot;&gt;&lt;/a&gt;CSS3简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; 如同人类的的进化一样，CSS3是CSS2的“进化”版本，在CSS2基础上，&lt;st
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>HTML5</title>
    <link href="http://yoursite.com/2019/07/10/HTML5/"/>
    <id>http://yoursite.com/2019/07/10/HTML5/</id>
    <published>2019-07-09T16:00:00.000Z</published>
    <updated>2020-04-28T02:37:26.357Z</updated>
    
    <content type="html"><![CDATA[<h1 id="html5语义化兼容性问题"><a href="#html5语义化兼容性问题" class="headerlink" title="html5语义化兼容性问题"></a>html5语义化兼容性问题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 现象: IE8 以下版本不支持 html5 语义化标签 --&gt;</span><br><span class="line">&lt;header&gt;我是header标签， 我应该独占一整行&lt;&#x2F;header&gt;</span><br></pre></td></tr></table></figure><p>解决方式:</p><ol><li><p>在浏览器解析标签之前, 动态创建一下 header 标签,  浏览器就认识了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.createElement(&quot;header&quot;);</span><br></pre></td></tr></table></figure></li><li><p>默认行内, 需要转成块级</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">header &#123;</span><br><span class="line">  &#x2F;* header 标签应该独占一整行 *&#x2F;</span><br><span class="line">  display: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>但是 html5 新增了很多语义化标签, 一个个创建太麻烦了, html5shiv 插件很好的解决这个问题</p><h2 id="html5shiv解决兼容性问题"><a href="#html5shiv解决兼容性问题" class="headerlink" title="html5shiv解决兼容性问题"></a>html5shiv解决兼容性问题</h2><p>在head中 引入 html5shiv 插件包即可解决 IE 8 不识别 html5 语义化标签的问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;html5shiv.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>但是在支持html5语义化标签的浏览器中, 这个js的执行就没有必要, 消耗了性能</p><p>所以我们可以通过 CSS IE条件注释 做兼容性处理</p><h2 id="CSS条件注释-了解"><a href="#CSS条件注释-了解" class="headerlink" title="CSS条件注释(了解)"></a>CSS条件注释(了解)</h2><p>CSS IE条件注释  专门用于兼容IE 低版本 </p><p>所以只有 IE9 及 IE9以下版本 才认识，其他版本的浏览器或者 IE10以上 的版本会当成注释,  不会解析  </p><p>它里面有判断IE版本的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lte：就是Less than or equal to的简写，也就是小于或等于的意思。</span><br><span class="line">lt ：就是Less than的简写，也就是小于的意思。</span><br><span class="line">gte：就是Greater than or equal to的简写，也就是大于或等于的意思。</span><br><span class="line">gt ：就是Greater than的简写，也就是大于的意思。</span><br></pre></td></tr></table></figure><p>用法实例: </p><p>在小于等于 IE 8 的浏览器中才会执行, 在IE9 中, 就是普通的注释, 不会解析执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--[if lte IE 8]&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      alert(&quot;呵呵, 小于等于IE8都会执行这段话&quot;);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;html5shiv.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;![endif]--&gt;</span><br></pre></td></tr></table></figure><p>大于 IE 8 的浏览器才执行, 只有 IE 9 认识, 其他浏览器, IE 10 及以上, 都将条件注释当成注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--[if gt IE 8]&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">      alert(&quot;只有IE9才执行这句话&quot;);</span><br><span class="line">   &lt;&#x2F;script&gt;</span><br><span class="line">&lt;![endif]--&gt;</span><br></pre></td></tr></table></figure><h1 id="html5-新增类名操作-熟记"><a href="#html5-新增类名操作-熟记" class="headerlink" title="html5 新增类名操作(熟记)"></a>html5 新增类名操作(熟记)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">四个操作样式类的方法, 很简单, 需要熟记</span><br><span class="line">1. 添加类: dom.classList.add   </span><br><span class="line">2. 移除类: dom.classList.remove</span><br><span class="line">3. 判断类: dom.classList.contains</span><br><span class="line">4. 切换类: dom.classList.toggle</span><br></pre></td></tr></table></figure><h1 id="html5-自定义属性操作"><a href="#html5-自定义属性操作" class="headerlink" title="html5 自定义属性操作"></a>html5 自定义属性操作</h1><p>将来在工作中, 有一种很常见的做法, 就是将数据绑定在标签自定义属性中, 我们之前都需要通过 getAttribute 或者 setAttribute 一个一个获取,  当数据很多时, 就很麻烦</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html5 提供了一种更简单存取数据的方式 dataset</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 用法:</span><br><span class="line">1. 存的时候, 在属性名前面加上 data-, </span><br><span class="line">   &lt;div class&#x3D;&quot;pp&quot; data-uage&#x3D;&quot;18&quot; data-uname&#x3D;&quot;鹏鹏&quot; data-sex&#x3D;&quot;男&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  </span><br><span class="line">2. 取的时候, 通过 dataset.属性名取, </span><br><span class="line">   例如: box.dataset.uage 或者 box.dataset[&quot;uage&quot;]</span><br><span class="line">  </span><br><span class="line">3. 修改添加, 直接通过对象属性操作方式操作即可</span><br><span class="line">   例如: box.dataset.uage&#x3D;12</span><br></pre></td></tr></table></figure><h1 id="网络状态"><a href="#网络状态" class="headerlink" title="网络状态"></a>网络状态</h1><blockquote><p>在移动端，我们经常需要检测设置是在线还是离线，HTML5为此定义了一个navigator.onLine属性，这个属性用于检测设备是否联网。</p></blockquote><h2 id="网络状态-1"><a href="#网络状态-1" class="headerlink" title="网络状态"></a>网络状态</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">navigator.onLine返回用户当前的网络状况，是一个布尔值</span><br><span class="line"><span class="number">1.</span> 如果浏览器连不上网(包括局域网)，就是离线状态，也就是脱机状态，会返回<span class="literal">false</span></span><br><span class="line"><span class="number">2.</span> 否则就是在线状态，返回<span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>注意：返回true不一定就是说一定能访问互联网，因为有可能连接的是局域网。但是返回false则表示一定没连上网。</strong></p><h2 id="监听网络变化"><a href="#监听网络变化" class="headerlink" title="监听网络变化"></a>监听网络变化</h2><blockquote><p>为了更好的确定网络是否连接，HTML5还定义了两个事件，用于监听网络状态的变化。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//网络连接时会被调用</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"online"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"online"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//网络断开时会被调用</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"offline"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"offline"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="地理位置"><a href="#地理位置" class="headerlink" title="地理位置"></a>地理位置</h1><blockquote><p>在HTML规范中，增加了获取用户地理信息的API，这样使得我们可以基于用户位置开发互联网应用，即基于位置服务LBS(Location Base Service)</p></blockquote><h2 id="隐私"><a href="#隐私" class="headerlink" title="隐私"></a>隐私</h2><p>HTML5规范提供了一套保护用户隐私的机制。必须先得到用户明确许可，才能获取用户的位置信息。</p><p><strong>在获取地理位置之前，会询问用户，只有在获得许可之后，才能获取到用户的位置信息。</strong></p><h2 id="相关的方法"><a href="#相关的方法" class="headerlink" title="相关的方法"></a>相关的方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//successCallback:获取成功后会调用,并返回一个position对象，里面包含了地理位置信息</span></span><br><span class="line"><span class="comment">//获取失败了会调用，并返回error对象，里面包含了错误信息。</span></span><br><span class="line"><span class="comment">//获取当前的地理位置信息</span></span><br><span class="line">navigator.geolocation.getCurrentPosition(successCallback, errorCallback)</span><br><span class="line"><span class="comment">//重复的获取当前的地理位置信息</span></span><br><span class="line">navigator.geolocation.watchPosition(successCallback, errorCallback)</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">navigator.geolocation.getCurrentPosition(<span class="function"><span class="keyword">function</span>(<span class="params">position</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 定位成功会调用该方法</span></span><br><span class="line">    <span class="comment">// position.coords.latitude 纬度</span></span><br><span class="line">    <span class="comment">// position.coords.longitude 经度</span></span><br><span class="line">    <span class="comment">// position.coords.accuracy 精度</span></span><br><span class="line">    <span class="comment">// position.coords.altitude 海拔高度</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 定位失败会调用该方法</span></span><br><span class="line">    <span class="comment">// error 是错误信息</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>PC端: <strong>chrome,火狐定位请求的页面要求要是https协议的, 所以PC端测试在IE下测试</strong></p><p>移动端: <strong>在iOS 10中，苹果对webkit定位权限进行了修改，定位请求的页面必须是https协议的。</strong></p><h2 id="百度地图"><a href="#百度地图" class="headerlink" title="百度地图"></a>百度地图</h2><blockquote><p>仅仅获取到经纬度对于用户来说意义并不大，因为用户也不知道经度和纬度表示的是地球上的哪一个地方，因为我们可以结合百度地图，准确的将用户的位置显示出来。</p></blockquote><p>百度地图官网：<a href="http://lbsyun.baidu.com/" target="_blank" rel="noopener">http://lbsyun.baidu.com/</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 在开发中，找到javascript API</span><br><span class="line"><span class="number">2.</span> 直接查看示例demo</span><br><span class="line"><span class="number">3.</span> 复制相应的代码，替换掉秘钥就行，秘钥只需创建一个新的应用就可以了。</span><br></pre></td></tr></table></figure><h1 id="web存储"><a href="#web存储" class="headerlink" title="web存储"></a>web存储</h1><blockquote><p>在代码执行的时候，数据都是存储在内存中的，当页面关闭或者浏览器关闭的时候，内存就被释放掉了。数据只有存储在硬盘上，才不会被释放。</p></blockquote><p>web存储初体验</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存储在内存中，会被释放</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"hello world"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//存储在硬盘上，不会被释放</span></span><br><span class="line">localStorage.setItem(<span class="string">"name"</span>, <span class="string">"张三"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(localStorage.getItem(<span class="string">"name"</span>));</span><br></pre></td></tr></table></figure><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><blockquote><p>传统方式，我们以document.cookie进行存储，但是存储起来特别麻烦，并且，存储大小只有4k，常用来做会话保持, 存sessionId。每次请求都会带上cookie</p></blockquote><p>cookie是以字符串形式存在的，这个字符串有固定的格式：key=value;key1=value1;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">"name=zhangsan"</span>;</span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">"age=18"</span>;</span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">"sex=23"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取cookie</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">document</span>.cookie;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p>使用原生js操作cookie太过麻烦，使用jquery.cookie插件，能够简化我们的操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置cookie</span></span><br><span class="line">$.cookie(<span class="string">"name"</span>, <span class="string">"zs"</span>);</span><br><span class="line"><span class="comment">//获取cookie</span></span><br><span class="line"><span class="built_in">console</span>.log($.cookie(<span class="string">"name"</span>));</span><br><span class="line"><span class="comment">//删除cookie</span></span><br><span class="line">$.removeCookie(<span class="string">"name"</span>);</span><br></pre></td></tr></table></figure><h2 id="sessionStorage与localStorage"><a href="#sessionStorage与localStorage" class="headerlink" title="sessionStorage与localStorage"></a>sessionStorage与localStorage</h2><blockquote><p>HTML5规范提出了解决方案，使用sessionStorage和localStorage存储数据。设置、读取、删除操作很方便</p></blockquote><p>window.sessionStorage的特点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 声明周期为关闭浏览器窗口</span><br><span class="line"><span class="number">2.</span> 不能在多个窗口下共享数据。</span><br><span class="line"><span class="number">3.</span> 大小为<span class="number">5</span>M</span><br></pre></td></tr></table></figure><p>window.localStorage的特点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 永久生效，除非手动删除</span><br><span class="line"><span class="number">2.</span> 可以多个窗口共享</span><br><span class="line"><span class="number">3.</span> 大小为<span class="number">5</span>M</span><br></pre></td></tr></table></figure><p>window.sessionStorage与window.localStorage的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setItem(key, value) <span class="comment">//设置存储内容</span></span><br><span class="line">getItem(key) <span class="comment">//读取存储内容</span></span><br><span class="line">removeItem(key) <span class="comment">//删除键值为key的存储内容</span></span><br><span class="line">clear() <span class="comment">//清空所有存储内容</span></span><br></pre></td></tr></table></figure><p><strong>面试题：请描述一下cookie，sessionStorage和localStorage的区别？</strong></p><h1 id="自定义播放器"><a href="#自定义播放器" class="headerlink" title="自定义播放器"></a>自定义播放器</h1><p>全屏切换API：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">video.requestFullScreen()</span><br></pre></td></tr></table></figure><p>方法：load()、play()、pause()<br>属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">currentTime:当前时间</span><br><span class="line">duration：总长时间</span><br><span class="line">timeupdate:播放进度更改时触发</span><br><span class="line">volume：控制音量</span><br></pre></td></tr></table></figure><p>参考文档<br><a href="http://www.w3school.com.cn/tags/html_ref_audio_video_dom.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/tags/html_ref_audio_video_dom.asp</a></p><p>推荐网站：<a href="https://www.awesomes.cn/" target="_blank" rel="noopener">https://www.awesomes.cn/</a></p><p>video.js </p><h1 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h1><blockquote><p>通过FileReader对象我们可以读取本地存储的文件，可以使用 File 对象来指定所要读取的文件或数据。其中File对象可以是来自用户在一个 <input> 元素上选择文件后返回的FileList 对象，也可以来自由拖放操作生成的  DataTransfer</p></blockquote><h2 id="files"><a href="#files" class="headerlink" title="files"></a>files</h2><p>对于file类型的input框，在这个DOM对象中，存在一个files属性，这个属性是FileList对象，是一个伪数组，里面存储着上传的所有文件，当input框指定了multiple属性之后，就可以上传多个文件了。</p><p>也就是说，通过files这个属性，我们就可以获取到所有上传的文件。</p><h2 id="file对象"><a href="#file对象" class="headerlink" title="file对象"></a>file对象</h2><p>File对象中包含了文件的最后修改时间、文件名、文件类型等信息。</p><h2 id="FileReader对象"><a href="#FileReader对象" class="headerlink" title="FileReader对象"></a>FileReader对象</h2><p>FileReader是一个HTML5新增的对象，用于读取文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个fileReader对象</span></span><br><span class="line"><span class="keyword">var</span> fr = <span class="keyword">new</span> FileReader;</span><br><span class="line"><span class="comment">//读取文件的两个方法</span></span><br><span class="line">readAsText() 以文本的方式读取文件</span><br><span class="line">readAsDataURL() 以DataURL形式读取文件</span><br><span class="line"><span class="comment">//文件读取完成事件：</span></span><br><span class="line">fr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//当文件读取完成，可以通过result属性获取结果</span></span><br><span class="line">fr.result</span><br></pre></td></tr></table></figure><p>参考资料：<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader#toc" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader#toc</a></p><p>案例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> file = <span class="built_in">document</span>.getElementById(<span class="string">"file"</span>);</span><br><span class="line">    <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span><br><span class="line"></span><br><span class="line">    file.addEventListener(<span class="string">"change"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.dir(file);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//files:里面存储了所有上传的文件</span></span><br><span class="line">        <span class="comment">//这个data就是我们上传的那个文件</span></span><br><span class="line">        <span class="keyword">var</span> data = file.files[<span class="number">0</span>]</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//1. 创建一个文件读取器</span></span><br><span class="line">        <span class="keyword">var</span> fr = <span class="keyword">new</span> FileReader();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 让文件读取器读取整个文件</span></span><br><span class="line">        fr.readAsDataURL(data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 等待文件读取完</span></span><br><span class="line">        <span class="comment">//onload：文件读取完成后，就会触发</span></span><br><span class="line">        fr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">            img.src = fr.result;</span><br><span class="line">            box.innerHTML = <span class="string">""</span>;</span><br><span class="line">            box.appendChild(img);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h1 id="拖拽"><a href="#拖拽" class="headerlink" title="拖拽"></a>拖拽</h1><p>在HTML5的规范中，我们可以通过为元素增加draggable=”true”来设置此元素是否可以进行拖拽操作，其中图片、链接默认是开启的。</p><h2 id="拖拽元素"><a href="#拖拽元素" class="headerlink" title="拖拽元素"></a>拖拽元素</h2><p>页面中设置了draggable=”true”属性的元素，其中<code>&lt;img&gt;</code>、<code>&lt;a&gt;</code>标签默认是可以被拖拽的</p><h2 id="目标元素-事件监听"><a href="#目标元素-事件监听" class="headerlink" title="目标元素, 事件监听"></a>目标元素, 事件监听</h2><p>页面中任何一个元素都可以成为目标元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ondragover应用于目标元素，当停留在目标元素上时调用</span><br><span class="line">ondrop应用于目标元素，当在目标元素上松开鼠标时调用(浏览器默认不让拖拽，需要组织dragover的默认行为。)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;html5语义化兼容性问题&quot;&gt;&lt;a href=&quot;#html5语义化兼容性问题&quot; class=&quot;headerlink&quot; title=&quot;html5语义化兼容性问题&quot;&gt;&lt;/a&gt;html5语义化兼容性问题&lt;/h1&gt;&lt;figure class=&quot;highlight plai
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ES6</title>
    <link href="http://yoursite.com/2019/06/23/ES6/"/>
    <id>http://yoursite.com/2019/06/23/ES6/</id>
    <published>2019-06-22T16:00:00.000Z</published>
    <updated>2020-04-28T02:31:42.517Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-ES6介绍"><a href="#1-ES6介绍" class="headerlink" title="1.ES6介绍"></a>1.ES6介绍</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">《ECMAScript <span class="number">6</span> 入门》</span><br><span class="line">《深入浅出ES6》              阮一峰</span><br><span class="line">http:<span class="comment">//es6.ruanyifeng.com/</span></span><br><span class="line"></span><br><span class="line">ECMAScript <span class="number">6.0</span>（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 <span class="number">2015</span> 年 <span class="number">6</span> 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</span><br><span class="line"></span><br><span class="line">ES6 提供了许多新特性，但并不是所有的浏览器都能够完美支持。好在目前各大浏览器自身也加快速度兼容 ES6 的新特性，其中对 ES6 新特性最友好的是 Chrome 和 Firefox 浏览器。</span><br></pre></td></tr></table></figure><h3 id="1-1-ES6的兼容性"><a href="#1-1-ES6的兼容性" class="headerlink" title="1.1 ES6的兼容性"></a>1.1 ES6的兼容性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">一、桌面端浏览器对ES2015的支持情况</span><br><span class="line">Chrome：<span class="number">51</span> 版起便可以支持 <span class="number">97</span>% 的 ES6 新特性。</span><br><span class="line">Firefox：<span class="number">53</span> 版起便可以支持 <span class="number">97</span>% 的 ES6 新特性。</span><br><span class="line">Safari：<span class="number">10</span> 版起便可以支持 <span class="number">99</span>% 的 ES6 新特性。</span><br><span class="line">IE：Edge <span class="number">15</span>可以支持 <span class="number">96</span>% 的 ES6 新特性。Edge <span class="number">14</span> 可以支持 <span class="number">93</span>% 的 ES6 新特性。（IE7~<span class="number">11</span> 基本不支持 ES6）</span><br><span class="line"></span><br><span class="line">二、移动端浏览器对ES2015的支持情况</span><br><span class="line">iOS：<span class="number">10.0</span> 版起便可以支持 <span class="number">99</span>% 的 ES6 新特性。</span><br><span class="line">Android：基本不支持 ES6 新特性（<span class="number">5.1</span> 仅支持 <span class="number">25</span>%）</span><br><span class="line"></span><br><span class="line">三、服务器对ES2015的支持情况</span><br><span class="line">Node.js：<span class="number">6.5</span> 版起便可以支持 <span class="number">97</span>% 的 ES6 新特性。（<span class="number">6.0</span> 支持 <span class="number">92</span>%）</span><br><span class="line"></span><br><span class="line">附：如何使用ES6的新特性，又能保证浏览器的兼容？</span><br><span class="line">针对 ES6 的兼容性问题，很多团队为此开发出了多种语法解析转换工具，把我们写的 ES6 语法转换成 ES5，相当于在 ES6 和浏览器之间做了一个翻译官。比较通用的工具方案有 babel，jsx，traceur，es6-shim 等。</span><br></pre></td></tr></table></figure><h3 id="1-2-ES6语法"><a href="#1-2-ES6语法" class="headerlink" title="1.2 ES6语法"></a>1.2 ES6语法</h3><h4 id="1-2-1-变量声明let与const"><a href="#1-2-1-变量声明let与const" class="headerlink" title="1.2.1 变量声明let与const"></a>1.2.1 变量声明let与const</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 1. let  变量</span><br><span class="line"><span class="comment">//1.1 let声明的变量不存在预解析</span></span><br><span class="line"><span class="comment">//1.2 let声明的变量在同一个作用域内不允许重复</span></span><br><span class="line"><span class="comment">//1.3 let声明的变量一定要在声明后使用，否则报错。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//之前作用域包含：全局作用域和函数作用域，不存在块级作用域。在ES6引入了块级作用域。</span></span><br><span class="line"><span class="comment">//所谓块级作用域就是  &#123; &#125; </span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="comment">//块级作用域内的变量不可以被外部访问</span></span><br><span class="line">    <span class="keyword">let</span> flag = <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(flag);</span><br><span class="line"></span><br><span class="line"><span class="comment">//for循环()中用let声明的变量只能在循环体内使用</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">//无法访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.3 在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”</span></span><br><span class="line"><span class="comment">// 只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</span></span><br><span class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">   tmp = <span class="string">'abc'</span>; <span class="comment">// 暂时性死区</span></span><br><span class="line">   <span class="keyword">let</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 2. const  常量</span><br><span class="line"><span class="keyword">const</span>  a = <span class="number">1</span>;   <span class="comment">//const声明的常量必须初始化</span></span><br><span class="line">a = <span class="number">2</span>;  <span class="comment">//错误，a不可以被改变</span></span><br></pre></td></tr></table></figure><h4 id="1-2-2-解构赋值"><a href="#1-2-2-解构赋值" class="headerlink" title="1.2.2 解构赋值"></a>1.2.2 解构赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.什么是解构赋值</span></span><br><span class="line">语法上就是赋值的作用。</span><br><span class="line">解构:左边一种结构，右边一种结构，左右一一对应进行赋值。</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.数组的解构赋值</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(a,b,c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.使用解构赋值进行变量交换</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> b=<span class="number">2</span>;</span><br><span class="line">    [a,b] = [b,a];</span><br><span class="line">    <span class="built_in">console</span>.log(a,b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.返回多个参数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> [a,b] = f();<span class="comment">//[a,b]=[1,2]</span></span><br><span class="line">    <span class="built_in">console</span>.log(a,b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.对象的解构赋值</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;foo,bar&#125; = &#123;<span class="attr">foo</span>:<span class="string">'hello'</span>,<span class="attr">bar</span>:<span class="string">'hi'</span>&#125;;</span><br><span class="line">    <span class="comment">//给对象取别名(如果有了别名，那么原来的名字就无效了)</span></span><br><span class="line">    <span class="keyword">let</span> &#123;<span class="attr">foo</span>:abc,bar&#125; = &#123;<span class="attr">foo</span>:<span class="string">'hello'</span>,<span class="attr">bar</span>:<span class="string">'hi'</span>&#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(foo,bar);</span><br><span class="line">    <span class="comment">//将对象中的属性赋值给对应成员</span></span><br><span class="line">    <span class="keyword">let</span> &#123;cos,sin,random&#125; = <span class="built_in">Math</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(cos,sin,random);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//6.对象的解构赋值</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> metaData=&#123;</span><br><span class="line">        title:<span class="string">"abc"</span>,</span><br><span class="line">        test:[&#123;</span><br><span class="line">            title:<span class="string">"test"</span>,</span><br><span class="line">            desc:<span class="string">"description"</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> &#123;<span class="attr">title</span>:esTitle,<span class="attr">test</span>:[&#123;<span class="attr">title</span>:cnTitle&#125;]&#125; = metaData;</span><br><span class="line">    <span class="built_in">console</span>.log(esTitle,cnTitle);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//7.字符串的解构赋值</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> [a,b,c,d,e] = <span class="string">"hello"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a,b,c,d,e);</span><br><span class="line">    <span class="comment">//获取字符串长度</span></span><br><span class="line">    <span class="keyword">let</span> &#123;length&#125; = <span class="string">"abc"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-3-字符串扩展"><a href="#1-2-3-字符串扩展" class="headerlink" title="1.2.3 字符串扩展"></a>1.2.3 字符串扩展</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//常用方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"hello world"</span>.includes(<span class="string">"world"</span>,<span class="number">3</span>));   <span class="comment">//3指定开始搜索的位置</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"hello world"</span>.startsWith(<span class="string">"h"</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"hello world"</span>.endsWith(<span class="string">"d"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//字符串复制</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">"abc"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(str.repeat(<span class="number">2</span>)); <span class="comment">//str重复两次</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//模板字符串  反引号</span></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        name:<span class="string">"zhangsan"</span>,</span><br><span class="line">        age:<span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">gender</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">`姓名<span class="subst">$&#123;obj.name&#125;</span>,年龄<span class="subst">$&#123;obj.age&#125;</span>,性别<span class="subst">$&#123;fn(<span class="string">'男'</span>)&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//前补后补字符串</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"a"</span>.padStart(<span class="number">2</span>,<span class="string">"0"</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"a"</span>.padEnd(<span class="number">2</span>,<span class="string">"0"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//标签模板字符串</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    (1)定义：模板字符串紧跟在一个函数后面，该函数将被调用来处理这个模板字符串</span></span><br><span class="line"><span class="comment">    (2)是函数调用的一种特殊方式，标签就是函数，紧跟在后面的模板字符串就是参数</span></span><br><span class="line"><span class="comment">    (3)如果模板字符串里面有变量，先将模板字符串处理成多个参数，再调用函数</span></span><br><span class="line"><span class="comment">    (4)函数tag会接收多个参数</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    function tag(stringArr, value1, value2)&#123;</span></span><br><span class="line"><span class="comment">         // stringArr:该数组的成员是模板字符串中那些没有变量替换的部分</span></span><br><span class="line"><span class="comment">         // value1,...:模板字符串各个变量被替换后的值</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">tag</span>(<span class="params">s,v1,v2</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(s);  <span class="comment">//字符串模板，数组</span></span><br><span class="line">        <span class="built_in">console</span>.log(v1);<span class="comment">//第一个$&#123;a+b&#125;</span></span><br><span class="line">        <span class="built_in">console</span>.log(v2);<span class="comment">//第二个$&#123;a*b&#125;</span></span><br><span class="line">        <span class="comment">//通过手动return 来过滤字符串</span></span><br><span class="line">        <span class="keyword">return</span> s[<span class="number">0</span>]+v1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(tag<span class="string">`Hello <span class="subst">$&#123;a+b&#125;</span> world <span class="subst">$&#123;a*b&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-4-函数扩展"><a href="#1-2-4-函数扩展" class="headerlink" title="1.2.4 函数扩展"></a>1.2.4 函数扩展</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//1.参数默认值(带有默认值的参数需要放在无默认值参数的右边)</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">param = <span class="string">'hello'</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(param);</span><br><span class="line">    &#125;</span><br><span class="line">    foo();</span><br><span class="line">    foo(<span class="string">"你好"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//2.参数结构赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;uname=<span class="string">'lisi'</span>,age=<span class="number">13</span>&#125;=&#123;&#125;</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(uname,age);</span><br><span class="line">    &#125;</span><br><span class="line">    foo(&#123;<span class="attr">uname</span>:<span class="string">'zhangsan'</span>,age<span class="string">"15"</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//3.rest参数  (剩余参数)  ...  将多个参数变成数组</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a,b,...param</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a,param);</span><br><span class="line">    &#125;</span><br><span class="line">    foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//4.扩展运算符  ...  将数组变为离散值</span></span><br><span class="line">    <span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">let</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">    <span class="keyword">let</span> arr3 = [...arr1,...arr2];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//5.扩展运算符  ...  将数组变为多个参数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a,b,c,</span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(a+b+c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">    foo.apply(<span class="literal">null</span>,arr); <span class="comment">//apply()方法第二个参数是数组</span></span><br><span class="line">    foo(...arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//6.箭头函数   代码块</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> foo = <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="string">"hello"</span>)&#125;;</span><br><span class="line">    foo();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> foo2 = <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> c = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"hello"</span>+name +c);</span><br><span class="line">    &#125;;</span><br><span class="line">    foo2(<span class="string">"小明"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//7.箭头函数应用</span></span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">element,index</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(element,index);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//8.箭头函数的注意事项：</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//8.1 箭头函数中的this是定义函数时所在的执行环境</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.num);</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    foo.call(&#123;<span class="attr">num</span>:<span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//8.2 箭头函数不可以使用arguments获取参数列表，可以用reset参数替代</span></span><br><span class="line">    <span class="comment">//   箭头函数不能new，没有原型链</span></span><br><span class="line">    <span class="keyword">let</span> foo = <span class="function">(<span class="params">...param</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(param);</span><br><span class="line">    &#125;</span><br><span class="line">    foo(<span class="number">123</span>,<span class="number">456</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//8.3 如果箭头函数中没有形参，()不能省略</span></span><br><span class="line">    <span class="comment">//8.4 如果箭头函数中只有一条return语句，可以省略&#123;&#125;和return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-5-数组扩展"><a href="#1-2-5-数组扩展" class="headerlink" title="1.2.5 数组扩展"></a>1.2.5 数组扩展</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Array.from  方法从一个类似数组或可迭代对象中创建一个新的数组实例</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//去数组中的重复元素</span></span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">12</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">let</span> arr1 = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr));</span><br><span class="line">        <span class="built_in">console</span>.log(arr1);<span class="comment">//输出：12,13,11,0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//获取数组的所有key</span></span><br><span class="line">    [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>].keys();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数组的所有values </span></span><br><span class="line">    [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>].values();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取所有的key和value</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> o <span class="keyword">of</span> [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(o);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组查找</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>].find(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;<span class="keyword">return</span> item&gt;<span class="number">3</span>&#125;))</span><br><span class="line">    <span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>].findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;<span class="keyword">return</span> item&gt;<span class="number">3</span>&#125;))<span class="comment">//返回第一个找到的值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组包含</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="literal">NaN</span>].includes(<span class="number">1</span>));</span><br><span class="line">     <span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="literal">NaN</span>].includes(<span class="literal">NaN</span>));<span class="comment">//字符串处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-6-对象扩展"><a href="#1-2-6-对象扩展" class="headerlink" title="1.2.6 对象扩展"></a>1.2.6 对象扩展</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.es5对象和es6对象对比</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> o = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> k = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//es5</span></span><br><span class="line">    <span class="keyword">let</span> es5 = &#123;</span><br><span class="line">        o:o,</span><br><span class="line">        k:k,</span><br><span class="line">        say:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//es6</span></span><br><span class="line">    <span class="keyword">let</span> es6 = &#123;</span><br><span class="line">        o,</span><br><span class="line">        k,</span><br><span class="line">        say()&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"say"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(es5,es6);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.属性表达式</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a=<span class="string">"b"</span>;</span><br><span class="line">    <span class="keyword">let</span> es5_obj = &#123;</span><br><span class="line">        a:<span class="string">"c"</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> es6_obj=&#123;</span><br><span class="line">        <span class="comment">//这里的[a]这个值为上面的b</span></span><br><span class="line">        [a]:<span class="string">"c"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.新增API</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//Object.is 相当于===</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="string">"abc"</span>,<span class="string">"abc"</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//拷贝</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Object</span>.assign(&#123;<span class="attr">a</span>:<span class="string">"a"</span>&#125;,&#123;<span class="attr">b</span>:<span class="string">"b"</span>&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历对象</span></span><br><span class="line">    <span class="keyword">let</span> test = &#123;<span class="attr">k</span>:<span class="number">123</span>,<span class="attr">o</span>:<span class="number">456</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> test)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(key,test[key]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-7-Symbol"><a href="#1-2-7-Symbol" class="headerlink" title="1.2.7 Symbol"></a>1.2.7 Symbol</h4><pre><code>ES6中新增了Symbol数据类型。Symbol不可以new之前的基本数据类型有6种：Undefined、Null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。Symbol声明的变量是唯一的，意义在于减少命名冲突</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//Symbol的变量是唯一的，所以a1和a2永远不相等</span></span><br><span class="line">    <span class="keyword">let</span> a1 = <span class="built_in">Symbol</span>();</span><br><span class="line">    <span class="keyword">let</span> a2 = <span class="built_in">Symbol</span>();</span><br><span class="line">    <span class="built_in">console</span>.log(a1 === a2);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Symbol全局注册表是一个类似全局作用域的共享环境</span></span><br><span class="line">    <span class="comment">//Symbol.for()方法首先在全局Symbol注册表中搜索键为"a3"的Symbol是否存在，如果存在，直接返回已有的Symbol；否则，创建一个新的Symbol，并使用这个键在Symbol全局注册表中注册，随即返回新创建的Symbol。后续如果再传入同样的键调用Symbol.for()会返回相同的Symbol</span></span><br><span class="line">    <span class="keyword">let</span> a3 = <span class="built_in">Symbol</span>.for(<span class="string">"a3"</span>);</span><br><span class="line">    <span class="keyword">let</span> a4 = <span class="built_in">Symbol</span>.for(<span class="string">"a3"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(a3 === a4);  <span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//Symbol作为key</span></span><br><span class="line">    <span class="keyword">let</span> a1 = <span class="built_in">Symbol</span>.for(<span class="string">"abc"</span>);</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        [a1]:<span class="string">"123"</span>,</span><br><span class="line">        <span class="string">"abc"</span>:<span class="number">345</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(obj);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(key,obj[key]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//Symbol作用：</span></span><br><span class="line">    <span class="comment">//有时我们可能希望在不同的代码中共享同一个Symbol，例如，在你的应用中有两种不同的对象类型，但是你希望它们使用同一个Symbol属性来表示一个独特的标识符。</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> a1 = <span class="built_in">Symbol</span>.for(<span class="string">"abc"</span>);</span><br><span class="line">        <span class="keyword">let</span> obj = &#123;</span><br><span class="line">            [a1]:<span class="string">"123"</span>,</span><br><span class="line">            <span class="string">"abc"</span>:<span class="number">345</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//这里拿到的Symbol和上面一个代码块拿到的Symbol是同一个东西</span></span><br><span class="line">        <span class="keyword">let</span> a1 = <span class="built_in">Symbol</span>.for(<span class="string">"abc"</span>);</span><br><span class="line">        <span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">            [a1]:<span class="string">"123"</span>,</span><br><span class="line">            <span class="string">"abc"</span>:<span class="number">34544</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(obj2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-ES6数据结构"><a href="#1-3-ES6数据结构" class="headerlink" title="1.3. ES6数据结构"></a>1.3. ES6数据结构</h3><h4 id="1-3-1-Array和Set"><a href="#1-3-1-Array和Set" class="headerlink" title="1.3.1 Array和Set"></a>1.3.1 Array和Set</h4><h5 id="a-Array"><a href="#a-Array" class="headerlink" title="a) Array"></a>a) Array</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   let  arr &#x3D; [1,2,3]; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="b-Set"><a href="#b-Set" class="headerlink" title="b) Set"></a>b) Set</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.Set元素是无序唯一</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> list = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">    list.add(<span class="number">5</span>);</span><br><span class="line">    list.add(<span class="number">7</span>);</span><br><span class="line">    list.add(<span class="string">"a"</span>);</span><br><span class="line">    list.add(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.Set的方法</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> arr=[<span class="string">'add'</span>,<span class="string">'delete'</span>,<span class="string">'clear'</span>,<span class="string">'has'</span>];</span><br><span class="line">  <span class="keyword">let</span> list=<span class="keyword">new</span> <span class="built_in">Set</span>(arr);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'has'</span>,list.has(<span class="string">'add'</span>));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'delete'</span>,list.delete(<span class="string">'add'</span>),list);</span><br><span class="line">  list.clear();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'list'</span>,list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.Set的遍历</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> arr=[<span class="string">'add'</span>,<span class="string">'delete'</span>,<span class="string">'clear'</span>,<span class="string">'has'</span>];</span><br><span class="line">  <span class="keyword">let</span> list=<span class="keyword">new</span> <span class="built_in">Set</span>(arr);</span><br><span class="line"></span><br><span class="line">  list.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;<span class="built_in">console</span>.log(item);&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.Set转Array</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> list = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">    list.add(<span class="number">5</span>);</span><br><span class="line">    list.add(<span class="number">7</span>);</span><br><span class="line">    list.add(<span class="string">"a"</span>);</span><br><span class="line">    list.add(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> arr = [...list];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="c-WeakSet"><a href="#c-WeakSet" class="headerlink" title="c) WeakSet"></a>c) WeakSet</h5><pre><code>WeakSet 结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有下面区别。</code></pre><blockquote><p>1.WeakSet 的成员只能是对象，而不能是其他类型的值。</p><p>2.WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。</p><p>3.WeakSet 只有add/delete/clear/hass四个方法，不能遍历，没有size属性等</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> weakList=<span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br><span class="line">  <span class="keyword">let</span> arg=&#123;&#125;;</span><br><span class="line">  weakList.add(arg);</span><br><span class="line">  <span class="comment">// weakList.add(2);</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'weakList'</span>,weakList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="d-Array和Set对比"><a href="#d-Array和Set对比" class="headerlink" title="d) Array和Set对比"></a>d) Array和Set对比</h5><blockquote><p>1.在Set中我们不能像访问数组元素那样直接通过索引来访问集合中的元素，如有需要，需要先将Set转换为数组。<br>2.Array中的数组元素是可以重复的，Set中的数组元素不能重复<br>3.Array的key默认是索引值，value是数组内容；Set的key和value都是实际内容</p></blockquote><h4 id="1-3-2-Object和Map"><a href="#1-3-2-Object和Map" class="headerlink" title="1.3.2 Object和Map"></a>1.3.2 Object和Map</h4><h5 id="a-Object"><a href="#a-Object" class="headerlink" title="a) Object"></a>a) Object</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        key:<span class="string">"value"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="b-Map"><a href="#b-Map" class="headerlink" title="b) Map"></a>b) Map</h5><pre><code>Map结构提供了“值—值”的对应，是一种更完善的Hash结构实现。如果你需要“键值对”的数据结构，Map比Object更合适。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">//基本使用</span></span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">let</span> arr=[<span class="string">'123'</span>];</span><br><span class="line">  map.set(arr,<span class="number">456</span>);<span class="comment">//为map添加或更新一个指定了键(key)和值(value)的(新)键值对。</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'map'</span>,map,map.get(arr));<span class="comment">//get获取对应的值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//Map的第二种定义</span></span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'a'</span>,<span class="number">123</span>],[<span class="string">'b'</span>,<span class="number">456</span>]]);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'map args'</span>,map);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'size'</span>,map.size);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'delete'</span>,map.delete(<span class="string">'a'</span>),map);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'clear'</span>,map.clear(),map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//has(key),delete(key),clear()</span></span><br><span class="line">    <span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">    m.set(<span class="string">'edition'</span>, <span class="number">6</span>);</span><br><span class="line">    m.set(<span class="number">262</span>, <span class="string">'standard'</span>);</span><br><span class="line">    m.set(<span class="literal">undefined</span>, <span class="string">'nah'</span>);</span><br><span class="line"></span><br><span class="line">    m.has(<span class="string">'edition'</span>)     <span class="comment">// true</span></span><br><span class="line">    m.has(<span class="string">'years'</span>)       <span class="comment">// false</span></span><br><span class="line">    m.has(<span class="number">262</span>)           <span class="comment">// true</span></span><br><span class="line">    m.has(<span class="literal">undefined</span>)     <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">    m.delete(<span class="literal">undefined</span>)</span><br><span class="line">    m.has(<span class="literal">undefined</span>)       <span class="comment">// false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//Map的遍历  Map遍历的顺序就是插入的顺序</span></span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">      [<span class="string">'F'</span>, <span class="string">'no'</span>],</span><br><span class="line">      [<span class="string">'T'</span>,  <span class="string">'yes'</span>],</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历map</span></span><br><span class="line">    map.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, key, map</span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(key,value);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="c-WeakMap"><a href="#c-WeakMap" class="headerlink" title="c) WeakMap"></a>c) WeakMap</h5><blockquote><p>1.WeakMap的key值只能是对象，而不能是其他类型的值。</p><p>2.WeakMap中的key值都是弱引用</p><p>3.WeakMap不能遍历，没有size属性等</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> weakmap=<span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> o=&#123;&#125;;</span><br><span class="line">  weakmap.set(o,<span class="number">123</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(weakmap.get(o));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="d-Object和Map区别"><a href="#d-Object和Map区别" class="headerlink" title="d) Object和Map区别"></a>d) Object和Map区别</h5><blockquote><ol><li>一个对象的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值，包括函数、对象、基本类型。</li><li>Map 中的键值是有序的，而添加到对象中的键则不是。因此，当对它进行遍历时，Map对象是按插入的顺序返回键值。</li><li>通过 size 属性直接获取一个 Map 的键值对个数，而 Object 的键值对个数只能手动计算。</li><li>Map 在频繁增删键值对的场景下会有些性能优势。</li></ol></blockquote><h3 id="1-4-Proxy和Reflect"><a href="#1-4-Proxy和Reflect" class="headerlink" title="1.4 Proxy和Reflect"></a>1.4 Proxy和Reflect</h3><h4 id="1-4-1-Proxy介绍"><a href="#1-4-1-Proxy介绍" class="headerlink" title="1.4.1 Proxy介绍"></a>1.4.1 Proxy介绍</h4><pre><code>Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var p &#x3D; new Proxy(target, handler);</span><br><span class="line">参数一target：目标对象，即拦截目标，可以是原生对象或者内置对象（比如是Object或者其他）；</span><br><span class="line">参数二handler：拦截配置。你对参数一拦截哪些属性，拦截后的操作如何，都是在这里配置的；</span><br><span class="line">返回值p：返回代理对象。需要注意，p和target并不相等。对返回值p进行的操作，会触发handler中自定义的方法。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> person=&#123;</span><br><span class="line">        time:<span class="string">'2017-03-11'</span>,</span><br><span class="line">        name:<span class="string">'小明'</span>,</span><br><span class="line">        age:<span class="number">18</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> monitor=<span class="keyword">new</span> <span class="built_in">Proxy</span>(person,&#123;</span><br><span class="line">        <span class="comment">// 拦截对象属性的读取</span></span><br><span class="line">        <span class="keyword">get</span>(target,key)&#123;</span><br><span class="line">            <span class="keyword">if</span>(key === <span class="string">"name"</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"不告诉你"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> target[key];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 拦截对象设置属性</span></span><br><span class="line">        <span class="keyword">set</span>(target,key,value)&#123;</span><br><span class="line">            <span class="keyword">if</span>(key===<span class="string">'time'</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> target[key]=value;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> target[key];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 拦截key in object操作</span></span><br><span class="line">        has(target,key)&#123;</span><br><span class="line">            <span class="keyword">if</span>(key===<span class="string">'name'</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> target[key]</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 拦截delete</span></span><br><span class="line">        deleteProperty(target,key)&#123;</span><br><span class="line">            <span class="keyword">if</span>(key === <span class="string">"age"</span>)&#123;</span><br><span class="line">                <span class="keyword">delete</span> target[key];</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 拦截Object.keys,Object.getOwnPropertySymbols,Object.getOwnPropertyNames</span></span><br><span class="line">        ownKeys(target)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.keys(target).filter(<span class="function"><span class="params">item</span>=&gt;</span>item!=<span class="string">'time'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//直接访问name。会被拦截</span></span><br><span class="line">    <span class="built_in">console</span>.log(monitor.name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改time成功，修改age被拦截</span></span><br><span class="line">    monitor.time=<span class="string">'2018'</span>;</span><br><span class="line">    monitor.age= <span class="number">200</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(monitor);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//name值为true，time值为false 被拦截了</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'name'</span> <span class="keyword">in</span> monitor,<span class="string">'time'</span> <span class="keyword">in</span> monitor);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//age被删除，name不被删除</span></span><br><span class="line">    <span class="keyword">delete</span> monitor.age;</span><br><span class="line">    <span class="keyword">delete</span> monitor.name;</span><br><span class="line">    <span class="built_in">console</span>.log(monitor);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//因为写了ownKeys的拦截，此时所有的time都不会被打印</span></span><br><span class="line">    <span class="built_in">console</span>.log(monitor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-2-Proxy实现对象属性值的校验"><a href="#1-4-2-Proxy实现对象属性值的校验" class="headerlink" title="1.4.2 Proxy实现对象属性值的校验"></a>1.4.2 Proxy实现对象属性值的校验</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> animal = &#123;</span><br><span class="line">    name:<span class="string">'dog'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> monitor=<span class="keyword">new</span> <span class="built_in">Proxy</span>(animal,&#123;</span><br><span class="line">    <span class="keyword">set</span>: function(target, key, value) &#123;</span><br><span class="line">        <span class="comment">//animalValidator中对应属性的校验逻辑是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (animalValidator[key]) &#123;</span><br><span class="line">            <span class="comment">//调用animalValidator对应属性的校验方法，入参属性值，如果条件满足</span></span><br><span class="line">            <span class="keyword">if</span> (animalValidator[key](value)) &#123;</span><br><span class="line">                target[key] = value;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`Cannot set <span class="subst">$&#123;key&#125;</span> to <span class="subst">$&#123;value&#125;</span>. Invalid.`</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//校验逻辑</span></span><br><span class="line"><span class="keyword">var</span> animalValidator = &#123;</span><br><span class="line">    name: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 动物的名字必须是字符串类型的</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> name === <span class="string">'string'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">monitor.name = <span class="string">'dog'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(monitor.name);</span><br><span class="line"><span class="comment">// Uncaught Error: Cannot set name to 123. Invalid.</span></span><br><span class="line">monitor.name = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><h4 id="1-4-3-Reflect"><a href="#1-4-3-Reflect" class="headerlink" title="1.4.3 Reflect"></a>1.4.3 Reflect</h4><pre><code>反射机制是指程序在运行的时候访问、检测和修改它本身状态或行为的一种能力，例如一个对象能够在运行时知道自己有哪些方法和属性。反射的概念在编译型的编程语言中比较明显，比如java、C#、Object-c等。对于     `JavaScript`来说，反射就是获取对象的内部结构的信息，所以JS中的反射随处可见，比如for...in方式遍历对象。从ECMAScript6开始，JS引入Reflect这个API专门用于操作反射。Reflect引入的目的主要有下面几个：</code></pre><h5 id="a-抽取语言内部的方法"><a href="#a-抽取语言内部的方法" class="headerlink" title="a) 抽取语言内部的方法"></a>a) 抽取语言内部的方法</h5><pre><code>从ECMAScript6开始，JS将Object对象的一些明显属于语言内部的方法（ 比如Object.defineProperty）放到Reflect对象上。 现阶段某些方法同时在Object和Reflect对象上部署， 未来的新方法将只部署在Reflect对象上。并且修改某些 Object 方法的返回结果， 让其变得更合理。 比如， Object.defineProperty(obj, name, desc) 在无法定义属性时， 会抛出一个错误，而Reflect.defineProperty(obj, name, desc) 则会返回false。</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> temp = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//一旦定义属性不成功会抛出一个异常</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(person, <span class="string">'name'</span>, &#123;</span><br><span class="line">        <span class="keyword">get</span>: function () &#123;</span><br><span class="line">            <span class="keyword">return</span> temp</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span>: function (val) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"sss"</span>)</span><br><span class="line">            <span class="comment">//异常 ： 程序出现的不正常现象</span></span><br><span class="line">            <span class="keyword">var</span> a = <span class="literal">null</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(a.toString())</span><br><span class="line">            <span class="comment">//产生异常之后的代码都不会执行</span></span><br><span class="line"></span><br><span class="line">            temp = val</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    person.name = <span class="string">"xxxx"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"aaaa"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"异常被捕获了"</span>);</span><br><span class="line">    <span class="comment">//一旦处理了异常之后，程序就可以继续向下执行了</span></span><br><span class="line">    <span class="built_in">console</span>.log(person);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  新写法</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Reflect</span>.defineProperty(target, property, attributes)) &#123;</span><br><span class="line"><span class="comment">// success</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// failure</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="c-让Object操作都变成函数行为。"><a href="#c-让Object操作都变成函数行为。" class="headerlink" title="c) 让Object操作都变成函数行为。"></a>c) 让Object操作都变成函数行为。</h5><pre><code>某些Object操作是命令式， 比如name in obj和delete obj[name]，而Reflect.has(obj, name) 和Reflect.deleteProperty(obj, name) 让它们变成了函数行为。</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  老写法</span></span><br><span class="line"><span class="string">'assign'</span> <span class="keyword">in</span> <span class="built_in">Object</span> <span class="comment">// true</span></span><br><span class="line"><span class="comment">//  新写法</span></span><br><span class="line"><span class="built_in">Reflect</span>.has(<span class="built_in">Object</span>, <span class="string">'assign'</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h5 id="c-Proxy和Reflect结合使用"><a href="#c-Proxy和Reflect结合使用" class="headerlink" title="c) Proxy和Reflect结合使用"></a>c) Proxy和Reflect结合使用</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loggedObj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;</span><br><span class="line"><span class="keyword">get</span>(target, name) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'get'</span>, target, name);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, name);</span><br><span class="line">&#125;,</span><br><span class="line">deleteProperty(target, name) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'delete'</span> + name);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Reflect</span>.deleteProperty(target, name);</span><br><span class="line">&#125;,</span><br><span class="line">has(target, name) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'has'</span> + name);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Reflect</span>.has(target, name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="d-代码可读性更好"><a href="#d-代码可读性更好" class="headerlink" title="d) 代码可读性更好"></a>d) 代码可读性更好</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#1. Reflect.apply()</span><br><span class="line">&#123;</span><br><span class="line">     <span class="comment">//Math的min只能获取指定参数中的最小值，要获取指定数组中的最小值，这个方法就不行了。</span></span><br><span class="line">    <span class="built_in">Math</span>.min(<span class="number">10</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">29</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//要获取数组中的最小值，我们可以使用Math.min.apply(thisArg,[params])方法，apply()方法两个参数，第一个用作修改调用函数中的this指向，第二个给指定函数传递参数(数组)</span></span><br><span class="line">    <span class="keyword">var</span> ages = [<span class="number">11</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">96</span>];</span><br><span class="line">    <span class="keyword">var</span> youngest = <span class="built_in">Math</span>.min.apply(<span class="built_in">Math</span>, ages);  </span><br><span class="line">    <span class="keyword">var</span> oldest = <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, ages);  </span><br><span class="line">    <span class="comment">//输出youngest的类型</span></span><br><span class="line">    <span class="keyword">var</span> type = <span class="built_in">Object</span>.prototype.toString.call(youngest);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以上是之前的解决方案，有了反射之后，我们可以使用Reflect.apply()方法</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       Reflect.apply()方法有三个参数：</span></span><br><span class="line"><span class="comment">    　 第一个参数为： 需要执行的函数；</span></span><br><span class="line"><span class="comment">　　 第二个参数为： 需要执行函数的上下文this；</span></span><br><span class="line"><span class="comment">　 　第三个参数为： 是一个数组或者伪数组， 会作为执行函数的参数；</span></span><br><span class="line"><span class="comment">　 */</span></span><br><span class="line">    <span class="keyword">var</span> youngest = <span class="built_in">Reflect</span>.apply(<span class="built_in">Math</span>.min, <span class="built_in">Math</span>, ages);  </span><br><span class="line">    <span class="keyword">var</span> oldest = <span class="built_in">Reflect</span>.apply(<span class="built_in">Math</span>.max, <span class="built_in">Math</span>, ages);  </span><br><span class="line">    <span class="keyword">var</span> type = <span class="built_in">Reflect</span>.apply(<span class="built_in">Object</span>.prototype.toString, youngest , [youngest]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-类和对象"><a href="#1-5-类和对象" class="headerlink" title="1.5 类和对象"></a>1.5 类和对象</h3><pre><code>ES6引入了Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。基本上，ES6的class可以看做只是一个语法糖，它的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</code></pre><h4 id="1-5-1-类的定义和创建实例"><a href="#1-5-1-类的定义和创建实例" class="headerlink" title="1.5.1 类的定义和创建实例"></a>1.5.1 类的定义和创建实例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//es6对js的类进行了规范：方法写在原型上，把属性写在构造函数里面</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 基本定义和生成实例</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name='zs')&#123;</span><br><span class="line">      <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    showMsg()&#123;    <span class="comment">//定义在原型上</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> v_parent=<span class="keyword">new</span> Parent(<span class="string">'v'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'构造函数和实例'</span>,v_parent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-5-2-继承"><a href="#1-5-2-继承" class="headerlink" title="1.5.2 继承"></a>1.5.2 继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 继承</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name='zs')&#123;</span><br><span class="line">      <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'继承'</span>,<span class="keyword">new</span> Child());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 继承传递参数</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name='zs')&#123;</span><br><span class="line">      <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name='child')&#123;</span><br><span class="line">      <span class="comment">//先初始化父亲的信息，在初始化自己的信息  </span></span><br><span class="line">      <span class="keyword">super</span>(name);</span><br><span class="line">      <span class="keyword">this</span>.type=<span class="string">'child'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'继承传递参数'</span>,<span class="keyword">new</span> Child(<span class="string">'hello'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-5-3-getter和setter"><a href="#1-5-3-getter和setter" class="headerlink" title="1.5.3 getter和setter"></a>1.5.3 getter和setter</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getter和setter方法的作用：给成员变量赋值</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> (name, age) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;   <span class="comment">//访问set name()方法</span></span><br><span class="line">        <span class="keyword">this</span>.age = age;         <span class="comment">//由于age没有get和set方法，所以这里直接给age成员变量赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> name (name) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"setter"</span>);</span><br><span class="line">        <span class="keyword">this</span>._name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> name () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"getter"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">"zhang"</span>, <span class="number">25</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p._name);     <span class="comment">//访问真实成员变量_name</span></span><br><span class="line"><span class="built_in">console</span>.log(p.name);      <span class="comment">//访问get  name()方法，在这个方法中再去访问真实成员变量_name</span></span><br><span class="line"></span><br><span class="line">#getter和setter注意点：</span><br><span class="line"><span class="number">1.</span>一旦某个属性写了getter和setter方法，则在使用<span class="keyword">this</span>.xxx,p.xxx的时候都是去访问getter和setter方法</span><br><span class="line"><span class="number">2.</span>一旦某个属性写了getter和setter方法，真实的成员变量就不在是xxx了，而是_xxx</span><br><span class="line"><span class="number">3.</span>getter和setter方法要写就都一起写上</span><br><span class="line"><span class="number">4.</span>getter和setter方法中注意死循环的问题</span><br></pre></td></tr></table></figure><h4 id="1-5-4-静态方法和静态属性"><a href="#1-5-4-静态方法和静态属性" class="headerlink" title="1.5.4 静态方法和静态属性"></a>1.5.4 静态方法和静态属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态方法和静态属性：属于类/函数的信息，可以直接通过类名和函数名直接访问，不需要创建对象</span></span><br><span class="line"><span class="comment">//实例对象访问不到</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 静态方法</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name='zs')&#123;</span><br><span class="line">      <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> tell()&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'tell'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  Parent.tell();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 静态属性</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name='zs')&#123;</span><br><span class="line">      <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> tell()&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'tell'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Parent.type=<span class="string">'test'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'静态属性'</span>,Parent.type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-异步"><a href="#1-6-异步" class="headerlink" title="1.6 异步"></a>1.6 异步</h3><h4 id="1-6-1-异步的问题"><a href="#1-6-1-异步的问题" class="headerlink" title="1.6.1 异步的问题"></a>1.6.1 异步的问题</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)<span class="comment">//require('fs')（fs模块用于对系统文件及目录进行读写操作。）</span></span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./data/a.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./data/b.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./data/c.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"># 上面代码的问题：无法保证a文件读完了接着读取b，b文件读完了接着读取c</span><br></pre></td></tr></table></figure><h4 id="1-6-2-方案1-使用异步回调"><a href="#1-6-2-方案1-使用异步回调" class="headerlink" title="1.6.2 方案1:使用异步回调"></a>1.6.2 方案1:使用异步回调</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./data/a.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">  fs.readFile(<span class="string">'./data/b.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    fs.readFile(<span class="string">'./data/c.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"># 回调的问题：回调地狱，回调的层次太深，代码很难维护</span><br></pre></td></tr></table></figure><h4 id="1-6-3-方案2-使用Promise"><a href="#1-6-3-方案2-使用Promise" class="headerlink" title="1.6.3 方案2:使用Promise"></a>1.6.3 方案2:使用Promise</h4><h5 id="a-Promise介绍"><a href="#a-Promise介绍" class="headerlink" title="a) Promise介绍"></a>a) Promise介绍</h5><pre><code>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    fs.readFile(<span class="string">'./data/a.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">#1.通过打印顺序我们可以发现 1--&gt;2--&gt;3 --&gt;"aaa"</span><br><span class="line">#2. Promise本身不是异步的，只是Promise中的任务是异步的</span><br><span class="line">#3. Promise中第一个参数的function是new之后就立刻执行的</span><br></pre></td></tr></table></figure><h5 id="b-Promise的状态"><a href="#b-Promise的状态" class="headerlink" title="b) Promise的状态"></a>b) Promise的状态</h5><pre><code>Promise有三种状态：</code></pre><blockquote><ul><li>Pending（进行中、未完成的）</li><li>Resolved（已完成，又称 Fulfilled）</li><li>Rejected（已失败）。</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">'./data/a.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="comment">//异步任务完毕，修改Promise状态，向下一个then传递数据</span></span><br><span class="line">            reject(err)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resolve(data)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//then方法需要Promise对象来调用，表示异步任务执行完毕之后做的事情</span></span><br></pre></td></tr></table></figure><h5 id="c-Promise的链"><a href="#c-Promise的链" class="headerlink" title="c) Promise的链"></a>c) Promise的链</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"11111"</span>)</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            resolve()</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"22222"</span>)</span><br><span class="line">        <span class="comment">//注意：如果此处返回的不是Promise对象，那么再后面一个then不会异步</span></span><br><span class="line">        <span class="comment">//要保证Promise的链式编程，需要在当前then中返回Promise</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                resolve()</span><br><span class="line">            &#125;, <span class="number">2000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">     &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'3333'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="e-使用Promise读文件"><a href="#e-使用Promise读文件" class="headerlink" title="e) 使用Promise读文件"></a>e) 使用Promise读文件</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">#1.基本实现</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">'./data/a.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            reject(err)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line">            resolve(data)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        fs.readFile(<span class="string">'./data/b.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(data);</span><br><span class="line">                resolve(data)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">'./data/c.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#2.代码封装</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pReadFile</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    fs.readFile(filePath, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(data)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pReadFile(<span class="string">'./data/a.txt'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="keyword">return</span> pReadFile(<span class="string">'./data/b.txt'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="keyword">return</span> pReadFile(<span class="string">'./data/c.txt'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h5 id="f-Promise的异常捕获"><a href="#f-Promise的异常捕获" class="headerlink" title="f) Promise的异常捕获"></a>f) Promise的异常捕获</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个Promise实例</span></span><br><span class="line">    <span class="comment">//1.Promise中的function是new Promise()的时候就执行的</span></span><br><span class="line">    <span class="comment">//2.Promise可以帮我们解决异步回调的问题(当你有异步回调操作的时候就可以用Promise)</span></span><br><span class="line">    <span class="comment">//3.Promise本身不是异步的，只不过Promise中可以有异步任务</span></span><br><span class="line">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"111"</span>);</span><br><span class="line">        <span class="comment">//fs.readFile()是一个异步操作</span></span><br><span class="line">        fs.readFile(<span class="string">"./m.txt"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"222"</span>);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"出错了"</span>+err);</span><br><span class="line">                reject(<span class="string">"错错错"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(data.toString(<span class="string">"utf-8"</span>));</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"333"</span>);</span><br><span class="line">                resolve(<span class="string">"返回文件数据"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//p是一个Promise对象</span></span><br><span class="line">    <span class="comment">//Promise对象有一个then方法,then方法的第一个函数是在Promise中的function的函数中调用resolve() 之后执行的</span></span><br><span class="line">    <span class="comment">//then方法的第二个函数是在Promise中的function的函数中调用reject() 之后执行的</span></span><br><span class="line">    <span class="comment">//.catch(function(error)&#123;&#125;) 主要用来捕获promise中的异常的，注意点：不要在promise的function中抛出异常，catch方法是捕获不到的。可以在</span></span><br><span class="line">    <span class="comment">//reject的回调函数中抛出异常，这样catch方法可以捕获reject回调函数抛出的异常</span></span><br><span class="line">    p.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"4444"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"5555"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">        <span class="comment">//抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"错错错错匆促错"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//捕获异常的代码</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"66666"</span>,error);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="g-Promise-all和Promise-race"><a href="#g-Promise-all和Promise-race" class="headerlink" title="g) Promise.all和Promise.race"></a>g) Promise.all和Promise.race</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.Promise.all   等所有的promise执行完了再执行then</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        resolve(<span class="string">"P1"</span>);</span><br><span class="line">    &#125;,<span class="number">500</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        resolve(<span class="string">"P2"</span>);</span><br><span class="line">    &#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Promise</span>.all([p1, p2]).then(<span class="function"><span class="keyword">function</span> (<span class="params">results</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(results); <span class="comment">// 获得一个Array: ['P1', 'P2']</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.Promise.race   有任何一个promise执行完了就执行then</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">     setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        resolve(<span class="string">"P1"</span>);</span><br><span class="line">    &#125;,<span class="number">500</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        resolve(<span class="string">"P2"</span>);</span><br><span class="line">    &#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Promise</span>.race([p1, p2]).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result); <span class="comment">// 'P1'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="1-6-4-jquery中Promise"><a href="#1-6-4-jquery中Promise" class="headerlink" title="1.6.4 jquery中Promise"></a>1.6.4 jquery中Promise</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"获取数据"</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/jquery/dist/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      $(<span class="string">'#btn'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">//请求本地数据</span></span></span><br><span class="line"><span class="actionscript">          url: <span class="string">'./data.json'</span>,</span></span><br><span class="line"><span class="actionscript">          type: <span class="string">'get'</span>,</span></span><br><span class="line"><span class="actionscript">          dataType: <span class="string">'json'</span></span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="actionscript">          .then(<span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data)</span></span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-7-Iterator"><a href="#1-7-Iterator" class="headerlink" title="1.7 Iterator"></a>1.7 Iterator</h3><h4 id="1-7-1-遍历方式的总结"><a href="#1-7-1-遍历方式的总结" class="headerlink" title="1.7.1 遍历方式的总结"></a>1.7.1 遍历方式的总结</h4><h5 id="a-普通for循环"><a href="#a-普通for循环" class="headerlink" title="a) 普通for循环"></a>a) 普通for循环</h5><pre><code>自Javascript诞生起就一直用的 就是for循环，它用来遍历数组</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i&lt; arr.length ; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="b-forEach"><a href="#b-forEach" class="headerlink" title="b) forEach"></a>b) forEach</h5><pre><code>从ES5开始 Javascript内置了forEach方法用来遍历数组</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">val, idx, arr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val + <span class="string">', index = '</span> + idx) <span class="comment">// val是当前元素，index当前元素索引，arr数组</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//写法简单了很多，但是也存在一个局限 就是你不能中断循环(使用break语句或使用return语句）</span></span><br></pre></td></tr></table></figure><h5 id="c-for-in"><a href="#c-for-in" class="headerlink" title="c) for-in"></a>c) for-in</h5><pre><code>for in更适合遍历对象，不要使用for in遍历数组，虽然for in也可以遍历数组，但是会存在以下问题：1.index索引为字符串型数字，不能直接进行几何运算2.遍历顺序有可能不是按照实际数组的内部顺序3.使用for in会遍历数组所有的可枚举属性，包括原型。例如原型方法method和name属性</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="string">'1'</span>, <span class="attr">b</span>: <span class="string">'2'</span>, <span class="attr">c</span>: <span class="string">'3'</span>, <span class="attr">d</span>: <span class="string">'4'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> o <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(o)    <span class="comment">//遍历的实际上是对象的属性名称 a,b,c,d</span></span><br><span class="line">    <span class="built_in">console</span>.log(obj[o])  <span class="comment">//这个才是属性对应的值1，2，3，4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="d-for…of"><a href="#d-for…of" class="headerlink" title="d) for…of"></a>d) for…of</h5><pre><code>它是ES6中新增加的语法,主要用来循环实现了Iterator接口类型的对象。for of遍历的只是数组内的元素，而不包括数组的原型属性method和索引name。但是for...of不可以遍历对象，因为对象没有实现Iterator接口。</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//for ... of 可以遍历Array、Set、Map不能遍历Object </span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'China'</span>, <span class="string">'America'</span>, <span class="string">'Korea'</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> o <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(o) <span class="comment">//China, America, Korea</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [index,value] <span class="keyword">of</span> [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>].entries()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index,value);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-7-2-迭代器介绍"><a href="#1-7-2-迭代器介绍" class="headerlink" title="1.7.2 迭代器介绍"></a>1.7.2 迭代器介绍</h4><p>1.遍历器（Iterator）是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署Iterator接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。</p><p>2.Iterator的作用有三个：</p><pre><code>一是为各种数据结构，提供一个统一的、简便的访问接口；二是使得数据结构的成员能够按某种次序排列；三是ES6创造了一种新的遍历命令for...of循环，Iterator接口主要供for...of消费。</code></pre><p>3.在ES6中，有些数据结构原生具备Iterator接口（比如数组），即不用任何处理，就可以被for…of循环遍历，有些就不行（比如对象）。凡是部署了Symbol.iterator属性的数据结构，就称为部署了遍历器接口。调用这个接口，就会返回一个遍历器对象。</p><p>4.在ES6中，有三类数据结构原生具备Iterator接口：数组、某些类似数组的对象、Set和Map结构。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//iterator基本使用</span></span><br><span class="line">&#123;</span><br><span class="line">      <span class="keyword">let</span> arr=[<span class="string">'hello'</span>,<span class="string">'world'</span>];</span><br><span class="line">      <span class="comment">//获取迭代器对象</span></span><br><span class="line">      <span class="keyword">let</span> map=arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line">      <span class="built_in">console</span>.log(map.next());</span><br><span class="line">      <span class="built_in">console</span>.log(map.next());</span><br><span class="line">      <span class="built_in">console</span>.log(map.next());</span><br><span class="line">    </span><br><span class="line">      <span class="comment">//内部遍历的时候就使用了迭代器</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(item); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-8-async和await"><a href="#1-8-async和await" class="headerlink" title="1.8 async和await"></a>1.8 async和await</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line"><span class="comment">//返回一个Promise()</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line"><span class="comment">//Promise中有一个读文件的异步任务</span></span><br><span class="line">fs.readFile(file,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err)&#123;</span><br><span class="line">reject(<span class="string">"cuowu"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//console.log(data.toString("utf-8"))</span></span><br><span class="line"><span class="comment">//当文件读取成功返回成功的数据</span></span><br><span class="line">resolve(data.toString(<span class="string">"utf-8"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*readFile("./a.txt")</span></span><br><span class="line"><span class="comment">.then(function()&#123;</span></span><br><span class="line"><span class="comment">return readFile("./b.txt")</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment">.then(function()&#123;</span></span><br><span class="line"><span class="comment">return readFile("./c.txt")</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//async 加在函数上，表示该函数是一个异步函数</span></span><br><span class="line"><span class="comment">//如果函数上有声明async，此时在函数内部就可以使用await</span></span><br><span class="line"><span class="comment">//await 表示等待，可以将原来异步的任务变成同步</span></span><br><span class="line"><span class="comment">//这里的read方法里面的几个读取文件的任务由于加了await，所有此时这些任务是同步的，会按照顺序向下执行</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"3"</span>)</span><br><span class="line"><span class="keyword">var</span> data = <span class="keyword">await</span> readFile(<span class="string">"./a.txt"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = <span class="keyword">await</span> readFile(<span class="string">"./b.txt"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = <span class="keyword">await</span> readFile(<span class="string">"./c.txt"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"4"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"1"</span>)</span><br><span class="line">read();  <span class="comment">//这个read方法是异步的，所以程序不会停在48行等read方法执行完毕</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-ES6介绍&quot;&gt;&lt;a href=&quot;#1-ES6介绍&quot; class=&quot;headerlink&quot; title=&quot;1.ES6介绍&quot;&gt;&lt;/a&gt;1.ES6介绍&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Ajax</title>
    <link href="http://yoursite.com/2019/06/15/Ajax/"/>
    <id>http://yoursite.com/2019/06/15/Ajax/</id>
    <published>2019-06-14T16:00:00.000Z</published>
    <updated>2020-04-28T02:29:01.132Z</updated>
    
    <content type="html"><![CDATA[<h1 id="http-协议"><a href="#http-协议" class="headerlink" title="http 协议"></a>http 协议</h1><blockquote><p>HTTP协议，即超文本传输协议(Hypertext transfer protocol)。是一种详细规定了浏览器和服务器之间互相通信的规则</p><p>HTTP协议规定了<strong>请求</strong> 和<strong>响应</strong> 的标准</p></blockquote><h2 id="请求与请求报文"><a href="#请求与请求报文" class="headerlink" title="请求与请求报文"></a>请求与请求报文</h2><p><strong>get请求的请求报文详解</strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//--------------------------请求行--------------------------------</span></span><br><span class="line"><span class="comment">// GET  请求方式</span></span><br><span class="line"><span class="comment">// /day02/01.php?username=pp&amp;password=123456    请求路径+参数（注意点）</span></span><br><span class="line"><span class="comment">// HTTP/1.1 HTTP的版本号</span></span><br><span class="line">GET /day02/<span class="number">01.</span>php?username=pp&amp;password=<span class="number">123456</span> HTTP/<span class="number">1.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------请求头--------------------------------</span></span><br><span class="line">Host: www.study.com</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; WOW64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">58.0</span><span class="number">.3029</span><span class="number">.96</span> Safari/<span class="number">537.36</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/webp,<span class="string">`*/*`</span>;q=<span class="number">0.8</span></span><br><span class="line">Accept-Encoding: gzip, deflate, sdch</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.8</span>,en;q=<span class="number">0.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------请求体-------------------------------------</span></span><br><span class="line"><span class="comment">//get请求没有请求体，但是参数会拼接到请求行中</span></span><br></pre></td></tr></table></figure><p><strong>POST请求的请求报文</strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-----------------------请求行---------------------------------------------</span></span><br><span class="line">POST /day02/<span class="number">01.</span>php HTTP/<span class="number">1.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------请求头--------------------------------------------</span></span><br><span class="line">Host: www.study.com</span><br><span class="line">Connection: keep-alive</span><br><span class="line"><span class="comment">//传递的参数的长度。</span></span><br><span class="line">Content-Length: <span class="number">29</span></span><br><span class="line">Cache-Control: max-age=<span class="number">0</span></span><br><span class="line">Origin: http:<span class="comment">//www.study.com</span></span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; WOW64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">58.0</span><span class="number">.3029</span><span class="number">.96</span> Safari/<span class="number">537.36</span></span><br><span class="line"><span class="comment">//内容类型：表单数据，如果是post请求，必须指定这个属性。</span></span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/webp,<span class="string">`*/*`</span>;q=<span class="number">0.8</span></span><br><span class="line">Referer: http:<span class="comment">//www.study.com/day02/01-login.html</span></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.8</span>,en;q=<span class="number">0.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------请求体------------------------------------------</span></span><br><span class="line">username=pp&amp;password=<span class="number">123456</span></span><br></pre></td></tr></table></figure><p><strong>GET请求与POST请求的对比</strong> </p><ul><li>GET请求没有请求体，因为GET请求的参数拼接到地址栏中了</li><li>POST请求有请求体，就是传递的参数</li><li>POST请求需要指定content-type属性。</li></ul><h2 id="响应与响应报文"><a href="#响应与响应报文" class="headerlink" title="响应与响应报文"></a>响应与响应报文</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---------------------状态行（响应行）-------------------------------</span></span><br><span class="line"><span class="comment">//HTTP/1.1  HTTP版本</span></span><br><span class="line"><span class="comment">//200 响应的状态</span></span><br><span class="line"><span class="comment">//200表示成功</span></span><br><span class="line"><span class="comment">//304表示读缓存</span></span><br><span class="line"><span class="comment">//404表示找不到资源</span></span><br><span class="line"><span class="comment">//500表示服务端错误</span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------响应头-----------------------------------------------</span></span><br><span class="line"><span class="built_in">Date</span>: Thu, <span class="number">22</span> Jun <span class="number">2017</span> <span class="number">16</span>:<span class="number">51</span>:<span class="number">22</span> GMT</span><br><span class="line">Server: Apache/<span class="number">2.4</span><span class="number">.23</span> (Win32) OpenSSL/<span class="number">1.0</span><span class="number">.2</span>j PHP/<span class="number">5.4</span><span class="number">.45</span></span><br><span class="line">X-Powered-By: PHP/<span class="number">5.4</span><span class="number">.45</span></span><br><span class="line">Content-Length: <span class="number">18</span></span><br><span class="line">Keep-Alive: timeout=<span class="number">5</span>, max=<span class="number">100</span></span><br><span class="line">Connection: Keep-Alive</span><br><span class="line"><span class="comment">//内容类型，告诉浏览器该如何解析响应结果</span></span><br><span class="line">Content-Type: text/html;charset=utf<span class="number">-8</span></span><br><span class="line"><span class="comment">//-----------------------响应体------------------------------------------------</span></span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><blockquote><p>即 Asynchronous [e’sɪŋkrənəs] Javascript And XML， AJAX 不是一门的新的语言，而是对现有技术的综合利用。 本质是在HTTP协议的基础上以异步的方式与服务器进行通信。</p></blockquote><h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h2><p>同步和异步概念：</p><p>同步: 指的就是事情要一件一件做。等做完前一件才能做后一件任务</p><p>异步: 不受当前任务的影响，两件事情同时进行，做一件事情时，不影响另一件事情的进行。</p><p>编程中：异步程序代码执行时不会阻塞其它程序代码执行,从而提升整体执行效率。</p> class="lazyload" data-src="/2019/06/15/Ajax/01-茶水.png" <img src="/"><p>网页异步应用：</p><ol><li>验证你的用户名是否已经存在（一边输入，一边获取你的信息，和后台比对）。</li><li>百度搜索提示，及相关内容展示（一边输入，一边找出了你可能要的内容）。</li><li>新浪微博评论（异步加载）。</li></ol><p>XMLHttpRequest可以以异步方式的请求数据处理程序,  可实现对网页的部分更新， 而不是刷新整个页面</p><h2 id="XMLHttpRequest对象"><a href="#XMLHttpRequest对象" class="headerlink" title="XMLHttpRequest对象"></a>XMLHttpRequest对象</h2><blockquote><p>浏览器内建对象，用于与服务器通信(交换数据) ，可以发送ajax请求。 由此我们便可实现对网页的部分更新，而不是刷新整个页面。这个请求是异步的，即在往服务器发送请求时，并不会阻碍程序的运行，浏览器会继续渲染后续的结构。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请求由客户端发起，其规范格式为：请求行、请求头、请求主体。</span><br></pre></td></tr></table></figure> class="lazyload" data-src="/2019/06/15/Ajax/02-请求规范格式.png" <img src="/"><h3 id="发送get请求"><a href="#发送get请求" class="headerlink" title="发送get请求"></a>发送get请求</h3><p>XMLHttpRequest以异步的方式发送HTTP请求，因此在发送请求时，一样需要遵循HTTP协议。</p><blockquote><p> 使用XMLHttpRequest发送get请求的步骤</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 创建一个XMLHttpRequest对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 设置请求行</span></span><br><span class="line"><span class="comment">// 第一个参数:请求方式  get/post</span></span><br><span class="line"><span class="comment">// 第二个参数:请求的地址 需要在url后面拼上参数列表</span></span><br><span class="line"><span class="comment">//第三个参数：是否异步 默认true，可不写</span></span><br><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"01.php?name=Jepson&amp;age18"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 设置请求头</span></span><br><span class="line"><span class="comment">//请求头中可以设置Content-Type,用以说明请求主体的内容是如何编码,get请求时没有请求体,无需设置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 设置请求体</span></span><br><span class="line"><span class="comment">//send（请求体）</span></span><br><span class="line"><span class="comment">//get请求的请求体为空,因为参数列表拼接到url后面了</span></span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>注意点 :</p><ul><li>get请求,设置请求行时,需要把参数列表拼接到url后面</li><li>get请求不用设置请求头, 不用说明请求主体的编码方式</li><li>get请求的请求体为null</li></ul><h3 id="发送post请求"><a href="#发送post请求" class="headerlink" title="发送post请求"></a>发送post请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 设置请求行 post请求的参数列表在请求体</span></span><br><span class="line">xhr.open(<span class="string">"post"</span>, <span class="string">"02.php"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 设置请求头, post 请求必须要设置 content-type, 标记请求体内容的解析方式, 不然后端无法解析获取数据</span></span><br><span class="line">xhr.setRequestHeader( <span class="string">"content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 设置请求体</span></span><br><span class="line">xhr.send( <span class="string">"name=Jepson&amp;age=18"</span> );</span><br></pre></td></tr></table></figure><p>注意点 :</p><ul><li>post请求, 设置请求行时, 不拼接参数列表</li><li>post必须设置请求头中的content-type为application/x-www-form-urlencoded, 标记请求体解析方式</li><li>post 请求需要将参数列表设置到请求体中</li></ul><h3 id="获取响应-readyState"><a href="#获取响应-readyState" class="headerlink" title="获取响应 readyState"></a>获取响应 readyState</h3><p>readyState:记录了XMLHttpRequest对象的当前状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">readyState有五种可能的值：</span><br><span class="line">xhr.readyState &#x3D; 0时，UNSENT open尚未调用</span><br><span class="line">xhr.readyState &#x3D; 1时，OPENED open已调用</span><br><span class="line">xhr.readyState &#x3D; 2时，HEADERS_RECEIVED 接收到响应头信息</span><br><span class="line">xhr.readyState &#x3D; 3时，LOADING 接收到响应主体</span><br><span class="line">xhr.readyState &#x3D; 4时，DONE 响应完成</span><br><span class="line"></span><br><span class="line">不用记忆状态，只需要了解有状态变化这个概念</span><br></pre></td></tr></table></figure><p>HTTP响应分为3个部分，状态行、响应头、响应体。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给xhr注册一个onreadystatechange事件，当xhr的状态发生状态发生改变时，会触发这个事件。</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1. 获取状态行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"状态行:"</span>+xhr.status);<span class="comment">//200</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2. 获取响应头</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"所有的响应头:"</span>+xhr.getAllResponseHeaders());</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"指定响应头:"</span>+xhr.getResponseHeader(<span class="string">"content-type"</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3. 获取响应体</span></span><br><span class="line">    <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>【判断用户名是否存在】//in_array($content,$arr) 判断$content在$arr中是否存在，如果存在，输出true,否则false</p><p>【用户登录案例】</p><h2 id="数据交互"><a href="#数据交互" class="headerlink" title="数据交互"></a>数据交互</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">浏览器端只是负责用户的交互和数据的收集以及展示，真正的数据都是存储在服务器端的。</span><br><span class="line"></span><br><span class="line">我们现在通过ajax的确可以返回一些简单的数据（一个字符串）, </span><br><span class="line">但是在实际开发过程中，肯定会会设计到大量的复杂类型的数据传输，</span><br><span class="line">比如数组、对象等，但是每个编程语言的语法都不一样。</span><br><span class="line"></span><br><span class="line">因此我们会采用通过的数据交换格式（XML、JSON）来进行数据的交互。</span><br></pre></td></tr></table></figure><h3 id="XML-了解即可"><a href="#XML-了解即可" class="headerlink" title="XML(了解即可)"></a>XML(了解即可)</h3><p><strong>什么是XML</strong></p><ul><li>XML 指可扩展标记语言（EXtensible Markup Language）</li><li>XML 是一种标记语言，很类似 HTML</li><li>XML 的设计宗旨是传输数据，而非显示数据</li><li>XML 标签没有被预定义。您需要自行定义标签。</li></ul><p><strong>语法规范</strong></p><ul><li>第一行必须是版本信息</li><li>必须有一个根元素（有且仅有一个）</li><li>标签不可有空格、不可以数字或.开头、大小写敏感</li><li>不可交叉嵌套，都是双标签，如果是单标签，必须闭合</li><li>属性双引号（浏览器自动修正成双引号了）</li><li>特殊符号要使用实体</li><li>注释和HTML一样</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gender</span>&gt;</span>男<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">desc</span>&gt;</span>路人甲<span class="tag">&lt;/<span class="name">desc</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gender</span>&gt;</span>男<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">desc</span>&gt;</span>路人乙<span class="tag">&lt;/<span class="name">desc</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>php获取xml文件的内容</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意: 如果需要返回 xml 数据, 需要将 content-type 改成 text/xml, 不然浏览器以 text/html 解析</span></span><br><span class="line">header( <span class="string">'content-type:text/xml;charset=utf-8'</span> );</span><br><span class="line"><span class="comment">// file_get_content 用于获取文件的内容</span></span><br><span class="line"><span class="comment">// 参数: 文件的路径</span></span><br><span class="line">$result = file_get_content( <span class="string">"data.xml"</span> );</span><br><span class="line"><span class="keyword">echo</span> $result;</span><br></pre></td></tr></table></figure><p><strong>js解析xml</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取服务端返回的xml数据，需要使用xhr.responseXML，这是一个document对象，可以使用DOM中的方法查找元素。</span></span><br><span class="line"><span class="keyword">var</span> data = xhr.responseXML;</span><br><span class="line"><span class="comment">//获取所有的学生</span></span><br><span class="line"><span class="keyword">var</span> students = data.querySelectorAll(<span class="string">"student"</span>);</span><br></pre></td></tr></table></figure><p>缺点：虽然可以描述和传输复杂数据，但是其解析过于复杂,  并且体积较大，所以实现开发已经很少使用了。</p><h3 id="JSON数据"><a href="#JSON数据" class="headerlink" title="JSON数据"></a>JSON数据</h3><p>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式。它基于 ECMAScript 规范，采用独立于编程语言的文本格式来存储和表示数据。</p><ul><li>数据在 键值对 中</li><li>数据由逗号分隔(最后一个 键值对 不能带逗号)</li><li>花括号保存对象，方括号保存数组</li><li>键使用双引号</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="string">'Hello'</span>, <span class="attr">b</span>: <span class="string">'World'</span>&#125;; <span class="comment">//这是一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是一个 JSON 字符串，本质是一个字符串</span></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">'&#123;"a": "Hello", "b": "World"&#125;'</span>;</span><br></pre></td></tr></table></figure><p><strong>JSON数据在不同语言进行传输时，类型为字符串，不同的语言各自也都对应有解析方法，解析完成后就能很方便的使用了</strong></p><h4 id="php处理json"><a href="#php处理json" class="headerlink" title="php处理json"></a>php处理json</h4><ul><li>php关联数组 ==&gt;  json   ( json_encode )</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// php的关联数组</span></span><br><span class="line">$obj = <span class="keyword">array</span>(</span><br><span class="line">  <span class="string">"a"</span> =&gt; <span class="string">"hello"</span>,</span><br><span class="line">  <span class="string">"b"</span> =&gt; <span class="string">"world"</span>,</span><br><span class="line">  <span class="string">"name"</span> =&gt; <span class="string">"鹏鹏"</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">//json字符串</span></span><br><span class="line">$json = json_encode( $obj );</span><br><span class="line"><span class="keyword">echo</span> $json;</span><br></pre></td></tr></table></figure><ul><li>json ==&gt; php对象/关联数组    ( json_decode )</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$json = <span class="string">'&#123;"a": "Hello", "b": "World"&#125;'</span>;<span class="comment">//json字符串</span></span><br><span class="line"><span class="comment">//第一个参数：json字符串</span></span><br><span class="line"><span class="comment">//第二个参数：</span></span><br><span class="line"><span class="comment">//false，将json转换成对象(默认)</span></span><br><span class="line"><span class="comment">//true：将json转换成数组(推荐)</span></span><br><span class="line">$obj = json_decode($json,<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">echo</span> $obj[<span class="string">'a'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过json文件获取到的内容就是一个json字符串。</span></span><br><span class="line">$data = file_get_contents(<span class="string">"data.json"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将json转换成数组</span></span><br><span class="line">$result = json_decode($data, <span class="keyword">true</span>);</span><br><span class="line">print_r($result);</span><br></pre></td></tr></table></figure><h4 id="JS处理json"><a href="#JS处理json" class="headerlink" title="JS处理json"></a>JS处理json</h4><ul><li>JS对象 ==&gt; JSON字符串 JSON.stringify(obj)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//obj是一个js对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="string">'Hello'</span>, <span class="attr">b</span>: <span class="string">'World'</span>&#125;</span><br><span class="line"><span class="comment">//result就变成了一个json字符串了</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">JSON</span>.stringify(obj);<span class="comment">// '&#123;"a": "Hello", "b": "World"&#125;'</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>JSON字符串 ==&gt; JS对象  JSON.parse(obj)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//json是一个json字符串</span></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">'&#123;"a": "Hello", "b": "World"&#125;'</span>;</span><br><span class="line"><span class="comment">//obj就变成了一个js对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(json);<span class="comment">// &#123;a: 'Hello', b: 'World'&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p>使用json进行数据传输</p><p>思考：</p><ol><li>js有一个对象，如何发送到php后台</li><li>php中有一个对象，如何发送到前台。</li></ol><p>【案例：获取表格数据.html】</p><h2 id="兼容性处理-了解-不用处理"><a href="#兼容性处理-了解-不用处理" class="headerlink" title="兼容性处理 (了解, 不用处理)"></a>兼容性处理 (了解, 不用处理)</h2><p>现在一般最多兼容到 IE8,  这里以后见到了知道是在处理兼容性就行了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(XMLHttpRequest)&#123;</span><br><span class="line">  <span class="comment">//现代浏览器 IE7+</span></span><br><span class="line">  xhr = <span class="keyword">new</span>  XMLHttpRequest();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="comment">//老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象：</span></span><br><span class="line">  xmlHttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="封装ajax工具函数"><a href="#封装ajax工具函数" class="headerlink" title="封装ajax工具函数"></a>封装ajax工具函数</h2><blockquote><p>每次发送ajax请求，其实步骤都是一样的，重复了大量代码，我们完全可以封装成一个工具函数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 创建xhr对象</span></span><br><span class="line"><span class="comment">//2. 设置请求行</span></span><br><span class="line"><span class="comment">//3. 设置请求头</span></span><br><span class="line"><span class="comment">//3. 设置请求体</span></span><br><span class="line"><span class="comment">//4. 监听响应状态</span></span><br><span class="line"><span class="comment">//5. 获取响应内容</span></span><br></pre></td></tr></table></figure><h3 id="参数提取"><a href="#参数提取" class="headerlink" title="参数提取"></a>参数提取</h3><table><thead><tr><th>参数名</th><th>参数类型</th><th>描述</th><th>传值</th><th>默认值</th></tr></thead><tbody><tr><td>type</td><td>string</td><td>请求方式</td><td>get/post</td><td>只要不传post，就是get</td></tr><tr><td>url</td><td>string</td><td>请求地址</td><td>接口地址</td><td>如果不传地址，不发送请求</td></tr><tr><td>async</td><td>boolean</td><td>是否异步</td><td>true/fase</td><td>只要不传false，那就是true，异步请求</td></tr><tr><td>data</td><td>object</td><td>请求数据</td><td><code>{key:value,key1:value2}</code></td><td>需要把这个对象拼接成参数的格式 uname=hucc&amp;upass=12345</td></tr><tr><td>dataType</td><td>string</td><td>返回的数据类型</td><td>xml/json/text</td><td>text</td></tr><tr><td>success</td><td>function</td><td>响应成功时调用</td><td>-</td><td>-</td></tr><tr><td>error</td><td>function</td><td>响应失败时调用</td><td>-</td><td>-</td></tr></tbody></table><h3 id="参数检测"><a href="#参数检测" class="headerlink" title="参数检测"></a>参数检测</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要求参数obj必须传递，否则直接不发送请求</span></span><br><span class="line"><span class="keyword">if</span>(!obj || <span class="keyword">typeof</span> obj !== <span class="string">"object"</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果type传递的是post，那就发送post请求，否则发送get请求</span></span><br><span class="line"><span class="keyword">var</span> type = obj.type == <span class="string">"post"</span>?<span class="string">"post"</span>:<span class="string">'get'</span>;</span><br><span class="line"><span class="keyword">var</span> url = obj.url;</span><br><span class="line"><span class="keyword">if</span>(!url)&#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 只有当async传递了false，才会发送同步请求，不然只发送异步请求</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">async</span> = obj.async == <span class="literal">false</span>? <span class="literal">false</span>:<span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h3 id="完整版本"><a href="#完整版本" class="headerlink" title="完整版本"></a>完整版本</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $ = &#123;</span><br><span class="line">  ajax: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//如果options参数没有传递，直接返回。</span></span><br><span class="line">    <span class="keyword">if</span> (!options || <span class="keyword">typeof</span> options !== <span class="string">"object"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//处理默认参数</span></span><br><span class="line">    <span class="comment">//如果参数不是post，那就默认为get</span></span><br><span class="line">    <span class="keyword">var</span> type = options.type == <span class="string">"post"</span> ? <span class="string">"post"</span> : <span class="string">"get"</span>;</span><br><span class="line">    <span class="comment">//如果没有传url，那就传当前地址</span></span><br><span class="line">    <span class="keyword">var</span> url = options.url || location.pathname;</span><br><span class="line">    <span class="comment">//如果参数不是false，那就默认是true，发异步请求</span></span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">async</span> = options.async == <span class="literal">false</span> ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> params = <span class="keyword">this</span>.getParams(options.data);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置请求行</span></span><br><span class="line">    <span class="keyword">if</span> (type == <span class="string">"get"</span>) &#123;</span><br><span class="line">      url = url + <span class="string">"?"</span> + params;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.open(type, url, <span class="keyword">async</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置请求头</span></span><br><span class="line">    <span class="keyword">if</span> (type == <span class="string">"post"</span>) &#123;</span><br><span class="line">      xhr.setRequestHeader(<span class="string">"content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置请求参数</span></span><br><span class="line">    xhr.send(params);</span><br><span class="line">    </span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="comment">/*根据响应头的content-type属性指定方法接收到的内容*/</span></span><br><span class="line">          <span class="keyword">var</span> contentType = xhr.getResponseHeader(<span class="string">'content-type'</span>);</span><br><span class="line">          <span class="keyword">var</span> data = <span class="literal">null</span>;</span><br><span class="line">          <span class="keyword">if</span> (contentType.indexOf(<span class="string">'json'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">            data = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (contentType.indexOf(<span class="string">'xml'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">            data = xhr.responseXML;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            data = xhr.responseText;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">/*执行成功函数*/</span></span><br><span class="line">          options.success &amp;&amp; options.success(data);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          options.error &amp;&amp; options.error(xhr.responseText);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getParams: <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//将obj对象转换成参数</span></span><br><span class="line">    <span class="comment">//将对象转换成参数列表</span></span><br><span class="line">    <span class="keyword">if</span> (!obj) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      arr.push(k + <span class="string">"="</span> + obj[k]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.join(<span class="string">"&amp;"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【登录案例】</p><h2 id="jQuery中的ajax方法"><a href="#jQuery中的ajax方法" class="headerlink" title="jQuery中的ajax方法"></a>jQuery中的ajax方法</h2><blockquote><p>jQuery为我们提供了更强大的Ajax封装</p></blockquote><h3 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax"></a>$.ajax</h3><p>参数列表</p><table><thead><tr><th>参数名称</th><th>描述</th><th>取值</th><th>示例</th></tr></thead><tbody><tr><td>url</td><td>接口地址</td><td></td><td>url:”02.php”</td></tr><tr><td>type</td><td>请求方式</td><td>get/post</td><td>type:”get”</td></tr><tr><td>timeout</td><td>超时时间</td><td>单位毫秒</td><td>timeout:5000</td></tr><tr><td>dataType</td><td>服务器返回的格式</td><td>json/xml/text(默认)</td><td>dataType:”json”</td></tr><tr><td>data</td><td>发送的请求数据</td><td>对象</td><td>data:{name:”zs”, age:18}</td></tr><tr><td>beforeSend</td><td>调用前的回调函数</td><td>function(){}</td><td>beforeSend:function(){ alert(1) }</td></tr><tr><td>success</td><td>成功的回调函数</td><td>function (data) {}</td><td>success:function (data) {}</td></tr><tr><td>error</td><td>失败的回调函数</td><td>function (error) {}</td><td>error:function(data) {}</td></tr><tr><td>complete</td><td>完成后的回调函数</td><td>function () {}</td><td>complete:function () {}</td></tr></tbody></table><p>使用示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  type:<span class="string">"get"</span>,<span class="comment">//请求类型</span></span><br><span class="line">  url:<span class="string">"02.php"</span>,<span class="comment">//请求地址</span></span><br><span class="line">  data:&#123;<span class="attr">name</span>:<span class="string">"zs"</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;,<span class="comment">//请求数据</span></span><br><span class="line">  dataType:<span class="string">"json"</span>,<span class="comment">//希望接受的数据类型</span></span><br><span class="line">  timeout:<span class="number">5000</span>,<span class="comment">//设置超时时间</span></span><br><span class="line">  beforeSend:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//alert("发送前调用");</span></span><br><span class="line">  &#125;,</span><br><span class="line">  success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//alert("成功时调用");</span></span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;,</span><br><span class="line">  error:<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//alert("失败时调用");</span></span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;,</span><br><span class="line">  complete:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//alert("请求完成时调用");</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>【案例：登录案例.html】</p><h3 id="其他api-了解"><a href="#其他api-了解" class="headerlink" title="其他api(了解)"></a>其他api(了解)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$.post(url, callback, [dataType]);只发送post请求</span></span><br><span class="line"><span class="comment">//$.get(url, callback, [dataType]);</span></span><br><span class="line"><span class="comment">//$.getJSON(url, callback);</span></span><br><span class="line"><span class="comment">//$.getScript(url,callback);//载入服务器端的js文件</span></span><br><span class="line"><span class="comment">//$("div").load(url);//载入一个服务器端的html页面。</span></span><br></pre></td></tr></table></figure><h3 id="接口化开发"><a href="#接口化开发" class="headerlink" title="接口化开发"></a>接口化开发</h3><p>请求地址即所谓的接口，通常我们所说的接口化开发，其实是指一个接口对应一个功能， 并且严格约束了<strong>请求参数</strong> 和<strong>响应结果</strong> 的格式，这样前后端在开发过程中，可以减少不必要的讨论， 从而并行开发，可以极大的提升开发效率，另外一个好处，当网站进行改版后，服务端接口进行调整时，并不影响到前端的功能。</p><h4 id="获取短信验证码"><a href="#获取短信验证码" class="headerlink" title="获取短信验证码"></a>获取短信验证码</h4><p><strong>需求文档(产品)</strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">总需求：点击获取验证码按钮，向服务端发送请求, 调用服务器端短信接口, 服务器端根据传参, 调用第三方短信接口, 给手机发送验证码</span><br><span class="line"></span><br><span class="line">需求<span class="number">1</span>：格式校验</span><br><span class="line">(<span class="number">1</span>) 手机号码不能为空   如果为空提示<span class="string">"手机号不能为空"</span></span><br><span class="line">(<span class="number">2</span>) 手机号码格式必须正确, 提示<span class="string">"请输入正确的手机号码"</span></span><br><span class="line">  </span><br><span class="line">需求<span class="number">2</span>：点击发送时，按钮显示为<span class="string">"发送中"</span>,并且不能重复提交请求</span><br><span class="line"></span><br><span class="line">需求<span class="number">3</span>：根据不同的响应结果，进行响应。</span><br><span class="line">(<span class="number">1</span>)如果接口调用成功</span><br><span class="line">   如果响应代码为<span class="number">100</span>，倒计时</span><br><span class="line">   如果响应代码为<span class="number">101</span>，提示手机号重复</span><br><span class="line">(<span class="number">2</span>)如果接口调用失败，告诉用户<span class="string">"服务器繁忙，请稍候再试"</span></span><br></pre></td></tr></table></figure><p><strong>接口文档</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">接口说明：获取短信验证码</span><br><span class="line">接口地址：getCode.php</span><br><span class="line">请求方式：<span class="keyword">get</span></span><br><span class="line">接口传参：mobile 手机号</span><br><span class="line">返回类型  json</span><br><span class="line">接口返回：&#123;</span><br><span class="line"><span class="string">"code"</span>:<span class="string">"101"</span>, </span><br><span class="line"><span class="string">"msg"</span>:<span class="string">"手机号码存在"</span>, </span><br><span class="line"><span class="string">"mobile"</span>:<span class="string">"18511249258"</span></span><br><span class="line">&#125;</span><br><span class="line">参数说明: code 当前业务逻辑的处理成功失败的标识  <span class="number">100</span>:成功   <span class="number">101</span>:手机号码存在</span><br><span class="line"> msg  当前系统返回给前端提示</span><br><span class="line"> mobile  当前的手机号码</span><br></pre></td></tr></table></figure><h4 id="注册接口"><a href="#注册接口" class="headerlink" title="注册接口"></a>注册接口</h4><p><strong>表单序列化</strong> serialize</p><p>jquery提供了一个<code>serialize()</code>方法序列化表单，说白就是将表单中带有name属性的所有参数拼成一个格式为<code>name=value&amp;name1=value1</code>这样的字符串。方便我们获取表单的数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//serialize将表单参数序列化成一个字符串。必须指定name属性</span></span><br><span class="line"><span class="comment">//name=pp&amp;pass=123456&amp;repass=123456&amp;mobile=15751776629&amp;code=1234</span></span><br><span class="line">$(<span class="string">'form'</span>).serialize();</span><br></pre></td></tr></table></figure><p>jquery的ajax方法，data参数能够直接识别表单序列化的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.post(&#123;</span><br><span class="line">  url:<span class="string">"register.php"</span>,</span><br><span class="line">  data:$(<span class="string">'form'</span>).serialize(),</span><br><span class="line">  dataType:<span class="string">'json'</span>,</span><br><span class="line">  success:<span class="function"><span class="keyword">function</span> (<span class="params">info</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(info);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>需求文档</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">注册功能</span><br><span class="line">总需求：点击注册按钮，向服务端发送请求</span><br><span class="line"></span><br><span class="line">需求<span class="number">1</span>:表单校验</span><br><span class="line">    <span class="number">1.1</span> 用户名不能为空，否则提示<span class="string">"请输入用户名"</span></span><br><span class="line">    <span class="number">1.2</span> 密码不能为空，否则提示<span class="string">"请输入密码"</span></span><br><span class="line">    <span class="number">1.3</span> 确认密码必须与密码一直，否则提示<span class="string">"确认密码与密码不一致"</span></span><br><span class="line">    <span class="number">1.4</span> 手机号码不能为空，否则提示<span class="string">"请输入手机号码"</span>;</span><br><span class="line">    <span class="number">1.5</span> 手机号码格式必须正确，否则提示<span class="string">"手机号格式错误"</span></span><br><span class="line">    <span class="number">1.6</span> 短信验证码必须是<span class="number">4</span>位的数字，否则提示<span class="string">"验证码格式错误"</span></span><br><span class="line">      </span><br><span class="line">需求<span class="number">2</span>：点击注册按钮时，按钮显示为<span class="string">"注册中..."</span>,并且不能重复提交请求</span><br><span class="line"></span><br><span class="line">需求<span class="number">3</span>：根据不同响应结果，处理响应</span><br><span class="line"><span class="number">3.1</span> 接口调用成功</span><br><span class="line">        <span class="number">100</span> 提示用户注册成功，<span class="number">3</span>s后跳转到首页</span><br><span class="line">        <span class="number">101</span> 提示用户<span class="string">"用户名jepson已经存在"</span></span><br><span class="line">        <span class="number">102</span> 提示用户<span class="string">"验证码错误"</span></span><br><span class="line">    <span class="number">3.2</span> 接口调用失败，提示<span class="string">"服务器繁忙，请稍后再试"</span>,恢复按钮的值</span><br></pre></td></tr></table></figure><p><strong>接口文档</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">接口说明：注册</span><br><span class="line">接口地址：register.php</span><br><span class="line">请求方式：post</span><br><span class="line">接口传参：name:用户名 pass:密码 code:验证码  mobile:手机号</span><br><span class="line">返回类型  json</span><br><span class="line">接口返回：&#123;</span><br><span class="line"><span class="string">"code"</span>:<span class="string">"100"</span>,</span><br><span class="line"><span class="string">"msg"</span>:<span class="string">"注册成功"</span>,</span><br><span class="line"><span class="string">"name"</span>:<span class="string">"Jepson"</span></span><br><span class="line">&#125;</span><br><span class="line">参数说明:</span><br><span class="line">      code 当前业务逻辑的处理成功失败的标识  <span class="number">100</span>:成功  <span class="number">101</span>:用户存在 <span class="number">102</span>:验证码错误</span><br><span class="line">      msg  当前系统返回给前端提示</span><br><span class="line">      name: 注册的用户名</span><br></pre></td></tr></table></figure><h1 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h1><blockquote><p>是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，用于网站的模板引擎就会生成一个标准的HTML文档。</p></blockquote><h2 id="为什么要使用模板引擎"><a href="#为什么要使用模板引擎" class="headerlink" title="为什么要使用模板引擎"></a>为什么要使用模板引擎</h2><p>我们通过ajax获取到数据后，需要把数据渲染到页面，在学习模板引擎前，我们的做法是大量的拼接字符串，对于结构简单的页面，这么做还行 </p><p>但是如果页面结构很复杂，使用拼串的话<strong>代码可阅读性非常的差，而且非常容易出错，后期代码维护也是相当的麻烦。</strong> </p><p>【演示：使用拼串进行渲染的缺点.html】</p><p>总结来说拼串渲染两大缺点：</p><ol><li>js中大量充斥着 html 结构拼串代码， 很冗余， 可读性差</li><li>字符串拼接很麻烦， 且维护起来也很麻烦， 容易出错</li></ol><h2 id="常见的模板引擎"><a href="#常见的模板引擎" class="headerlink" title="常见的模板引擎"></a>常见的模板引擎</h2><p>BaiduTemplate：<a href="http://tangram.baidu.com/BaiduTemplate/" target="_blank" rel="noopener">http://tangram.baidu.com/BaiduTemplate/</a><br>velocity.js：<a href="https://github.com/shepherdwind/velocity.js/" target="_blank" rel="noopener">https://github.com/shepherdwind/velocity.js/</a><br>ArtTemplate：<a href="https://github.com/aui/artTemplate" target="_blank" rel="noopener">https://github.com/aui/artTemplate</a></p><p>artTemplate是使用最广泛，效率最高的模板引擎，需要大家掌握。</p><h2 id="artTemplate的使用"><a href="#artTemplate的使用" class="headerlink" title="artTemplate的使用"></a>artTemplate的使用</h2><p><a href="https://github.com/aui/art-template" target="_blank" rel="noopener">github地址</a></p><p><a href="https://aui.github.io/art-template/docs/" target="_blank" rel="noopener">中文api地址</a></p><h3 id="artTemplate入门"><a href="#artTemplate入门" class="headerlink" title="artTemplate入门"></a>artTemplate入门</h3><p><strong>1.引入模板引擎的js文件</strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"template-web.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2.准备模板</strong> </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  指定了type为text/html后，这一段script标签并不会解析，也不会显示。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/html"</span> <span class="attr">id</span>=<span class="string">"myTmp"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：隔壁老王<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：18<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>技能：查水表<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>描述：年轻力气壮<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3.准备数据</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3. 准备数据,数据是后台获取的，可以随时变化</span></span><br><span class="line"><span class="keyword">var</span> json = &#123;</span><br><span class="line">  userName:<span class="string">"隔壁老王"</span>,</span><br><span class="line">  age:<span class="number">18</span>,</span><br><span class="line">  skill:<span class="string">"查水表"</span>,</span><br><span class="line">  desc:<span class="string">"年轻气壮"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.将模板与数据进行绑定</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一个参数：模板的id</span></span><br><span class="line"><span class="comment">//第二个参数：数据</span></span><br><span class="line"><span class="comment">//返回值：根据模板生成的字符串。</span></span><br><span class="line"><span class="keyword">var</span> html = template(<span class="string">"myTmp"</span>, json);</span><br><span class="line"><span class="built_in">console</span>.log(html);</span><br></pre></td></tr></table></figure><p><strong>5.修改模板</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/html"</span> <span class="attr">id</span>=<span class="string">"myTmp"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：</span><span class="template-variable">&#123;&#123;userName&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：</span><span class="template-variable">&#123;&#123;age&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>技能：</span><span class="template-variable">&#123;&#123;skill&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>描述：</span><span class="template-variable">&#123;&#123;desc&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>6.将数据显示到页面</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">"div"</span>);</span><br><span class="line">div.innerHTML = html;</span><br></pre></td></tr></table></figure><h3 id="artTemplate标准语法"><a href="#artTemplate标准语法" class="headerlink" title="artTemplate标准语法"></a>artTemplate标准语法</h3><p><strong>if语法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;if gender='男'&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"man"</span>&gt;</span></span><br><span class="line">&#123;&#123;else&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"woman"</span>&gt;</span></span><br><span class="line">&#123;&#123;/if&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>each语法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  1. &#123;&#123;each data&#125;&#125;  可以通过$value 和 $index获取值和下标</span></span><br><span class="line"><span class="comment">  2. &#123;&#123;each data v i&#125;&#125;  自己指定值为v，下标为i</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">&#123;&#123;each data v i&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;v.url&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;v.src&#125;&#125;"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;v.content&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果返回的数据是个数组，必须使用对象进行包裹，因为在&#123;&#123;&#125;&#125;中只写书写对象的属性。</span></span><br><span class="line"><span class="keyword">var</span> html = template(<span class="string">"navTmp"</span>, &#123;<span class="attr">data</span>:info&#125;);</span><br></pre></td></tr></table></figure><h1 id="瀑布流案例"><a href="#瀑布流案例" class="headerlink" title="瀑布流案例"></a>瀑布流案例</h1><h2 id="封装jQuery瀑布流插件"><a href="#封装jQuery瀑布流插件" class="headerlink" title="封装jQuery瀑布流插件"></a>封装jQuery瀑布流插件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//特点分析：</span></span><br><span class="line"><span class="comment">//1. 跟以前将的瀑布流不一样的是，这次的瀑布流固定版心为1200px</span></span><br><span class="line"><span class="comment">//2. 瀑布流固定摆放5列，每一列的宽度固定为232px。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//思路分析：</span></span><br><span class="line"><span class="comment">//1. 计算每一列之间的缝隙</span></span><br><span class="line"><span class="comment">//2. 初始化一个数组，用户存储每一列的高度 [0,0,0,0,0]</span></span><br><span class="line"><span class="comment">//3. 查找数组的最小列，每次都把图片定位到最小列的位置</span></span><br><span class="line"><span class="comment">//4. 更新数组最小列的高度（加上定位过来的图片的高度）</span></span><br></pre></td></tr></table></figure><p>代码参考：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$.fn.waterfall = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $box = $(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">var</span> $item = $box.children();</span><br><span class="line">  <span class="keyword">var</span> boxWidth = $box.width();<span class="comment">//父盒子的宽度</span></span><br><span class="line">  <span class="keyword">var</span> itemWidth = <span class="number">232</span>;<span class="comment">//每个盒子固定宽度为232</span></span><br><span class="line">  <span class="keyword">var</span> columns = <span class="number">5</span>;<span class="comment">//固定摆放5列</span></span><br><span class="line">  <span class="keyword">var</span> gap = (boxWidth - columns * itemWidth) / (columns - <span class="number">1</span>);<span class="comment">//缝隙的宽度 10</span></span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]; <span class="comment">//初始化数组</span></span><br><span class="line">  $item.each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//查找最小列</span></span><br><span class="line">    <span class="keyword">var</span> min = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> minIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (min &gt; arr[i]) &#123;</span><br><span class="line">        min = arr[i];</span><br><span class="line">        minIndex = i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置位置</span></span><br><span class="line">    $(<span class="keyword">this</span>).css(&#123;</span><br><span class="line">      left: minIndex * (itemWidth + gap),</span><br><span class="line">      top: min</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//更新数组</span></span><br><span class="line">    arr[minIndex] = min + $(<span class="keyword">this</span>).outerHeight() + gap;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="瀑布流完整版"><a href="#瀑布流完整版" class="headerlink" title="瀑布流完整版"></a>瀑布流完整版</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需求分析：</span></span><br><span class="line"><span class="comment">//1. 页面刚开始，没有任何一张图片。因此需要从通过ajax获取图片</span></span><br><span class="line"><span class="comment">//2. 使用模版引擎将获取到的数据渲染到页面</span></span><br><span class="line"><span class="comment">//3. 因为图片路径是从服务端获取的，加载需要时间，需要等待图片加载完成后才能使用瀑布流进行布局。</span></span><br><span class="line"><span class="comment">//4. 给window注册scroll事件，当触底时，需要动态的加载图片。</span></span><br><span class="line"><span class="comment">//5. 加载时，显示加载中的提示信息，并且要求不能重复发送ajax请求</span></span><br><span class="line"><span class="comment">//6. 当服务端返回图片数量为0时，提示用户没有更多数据。</span></span><br></pre></td></tr></table></figure><p>接口文档</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口说明：瀑布流分页数据</span></span><br><span class="line"><span class="comment">//接口地址：data.php</span></span><br><span class="line"><span class="comment">//请求方式：get</span></span><br><span class="line"><span class="comment">//接口参数：page 当前是第几页    pageSize 当前页需要显示多少条</span></span><br><span class="line"><span class="comment">//返回类型  json</span></span><br><span class="line"><span class="comment">//返回数据：</span></span><br><span class="line">&#123;</span><br><span class="line">  page: <span class="number">2</span>,</span><br><span class="line">  items:[</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">"./images/1.jpg"</span>,<span class="attr">text</span>:<span class="string">'这是描述信息'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">"./images/2.jpg"</span>,<span class="attr">text</span>:<span class="string">'这是描述信息'</span>&#125;</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">"./images/2.jpg"</span>,<span class="attr">text</span>:<span class="string">'这是描述信息'</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//page   下一页的页码</span></span><br><span class="line"><span class="comment">//items  返回当前页的数据</span></span><br><span class="line"><span class="comment">//path 图片地址</span></span><br><span class="line"><span class="comment">//text 文字</span></span><br></pre></td></tr></table></figure><h1 id="同源与跨域"><a href="#同源与跨域" class="headerlink" title="同源与跨域"></a>同源与跨域</h1><h2 id="同源"><a href="#同源" class="headerlink" title="同源"></a>同源</h2><h3 id="同源策略的基本概念"><a href="#同源策略的基本概念" class="headerlink" title="同源策略的基本概念"></a>同源策略的基本概念</h3><blockquote><p>1995年，同源政策由 Netscape 公司引入浏览器。目前，所有浏览器都实行这个政策。<br>同源策略：最初，它的含义是指，A网页设置的 Cookie，B网页不能打开，除非这两个网页”同源”。所谓”同源”指的是”三个相同”。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">协议相同</span><br><span class="line">域名相同</span><br><span class="line">端口相同</span><br></pre></td></tr></table></figure><p>举例来说，这个网址<code>http://www.example.com/dir/page.html</code>协议是<code>http://</code>，</p><p>域名是<code>www.example.com</code>，端口是<code>80</code>（默认端口可以省略）。它的同源情况如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//www.example.com/dir2/other.html：同源</span></span><br><span class="line"></span><br><span class="line">file:<span class="comment">///F:/phpStudy/WWW/day01/04-demo/04.html 不同源(协议不同)</span></span><br><span class="line">http:<span class="comment">//v2.www.example.com/dir/other.html：不同源（域名不同）</span></span><br><span class="line">http:<span class="comment">//www.example.com:81/dir/other.html：不同源（端口不同）</span></span><br></pre></td></tr></table></figure><h3 id="同源策略的目的"><a href="#同源策略的目的" class="headerlink" title="同源策略的目的"></a>同源策略的目的</h3><blockquote><p>同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。</p></blockquote><h3 id="同源策略的限制范围"><a href="#同源策略的限制范围" class="headerlink" title="同源策略的限制范围"></a>同源策略的限制范围</h3><blockquote><p>随着互联网的发展，“同源策略”越来越严格，目前，如果非同源，以下三种行为都将收到限制。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> Cookie、LocalStorage 和 IndexDB 无法读取。</span><br><span class="line"><span class="number">2.</span> DOM 无法获得。</span><br><span class="line"><span class="number">3.</span> AJAX 请求不能发送。</span><br></pre></td></tr></table></figure><p>虽然这些限制是很有必要的，但是也给我们日常开发带来不好的影响。比如实际开发过程中，往往都会把服务器端架设到一台甚至是一个集群的服务器中，把客户端页面放到另外一个单独的服务器。那么这时候就会出现不同源的情况，如果我们知道两个网站都是安全的话，我们是希望两个不同源的网站之间可以相互请求数据的。这就需要使用到<strong>跨域</strong> 。</p><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p>【演示跨域问题.html】</p><h3 id="jsonp-无兼容性问题"><a href="#jsonp-无兼容性问题" class="headerlink" title="jsonp( 无兼容性问题 )"></a>jsonp( 无兼容性问题 )</h3><blockquote><p>JSONP(JSON with Padding)、可用于解决主流浏览器的跨域数据访问的问题。</p><p>原理：服务端返回一个定义好的js函数的调用，并且将服务器的数据以该函数参数的形式传递过来，这个方法需要前后端配合</p></blockquote><p><code>script</code> 标签是不受同源策略的限制的，它可以载入任意地方的 JavaScript 文件。类似的还有<code>img</code>和<code>link</code>标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--不受同源策略限制的标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://www.api.com/1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://www.api.com/1.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://www.api.com/1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="jsonp演化过程1"><a href="#jsonp演化过程1" class="headerlink" title="jsonp演化过程1"></a>jsonp演化过程1</h4><p>php文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">"content-type:text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"alert(1111)"</span>;</span><br></pre></td></tr></table></figure><p>html文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://www.api.com/testjs.php"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>原理：其实src的路径是什么文件不重要，无论引入js文件还是php文件，最后返回给浏览器的都是字符串，因此我们script标签是可以引入一个php文件的。</p><h4 id="jsonp演化过程2"><a href="#jsonp演化过程2" class="headerlink" title="jsonp演化过程2"></a>jsonp演化过程2</h4><p>php文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">"content-type:text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"var a = 118;"</span>;</span><br></pre></td></tr></table></figure><p>html文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://www.api.com/testjs.php"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//a打印出来了118</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(a);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>我们现在做到了一件事情，从不同源的php文件中获取到了数据</strong> </p><p>缺点：获取数据的script标签必须写在使用的script标签的前面，必须保证先有数据才能对数据进行渲染。</p><h4 id="jsonp演化过程3"><a href="#jsonp演化过程3" class="headerlink" title="jsonp演化过程3"></a>jsonp演化过程3</h4><p>php代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">"content-type:text/html;charset=utf-8"</span>);</span><br><span class="line">$arr = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">"name"</span>=&gt;<span class="string">"zs"</span>,</span><br><span class="line">    <span class="string">"age"</span>=&gt;<span class="number">18</span></span><br><span class="line">);</span><br><span class="line">$result = json_encode($arr);</span><br><span class="line"><span class="comment">//这是一段js函数的调用的代码，$result就是我们想要的数据</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"func($result)"</span>;</span><br></pre></td></tr></table></figure><p>js代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(data);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://www.api.com/testjs.php"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>缺点：后端必须知道前端声明的方法的名字，后端才能调用。</p><h4 id="jsonp演化过程4"><a href="#jsonp演化过程4" class="headerlink" title="jsonp演化过程4"></a>jsonp演化过程4</h4><p>php代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">"content-type:text/html;charset=utf-8"</span>);</span><br><span class="line">$arr = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">"name"</span>=&gt;<span class="string">"zs"</span>,</span><br><span class="line">    <span class="string">"age"</span>=&gt;<span class="number">18</span></span><br><span class="line">);</span><br><span class="line">$result = json_encode($arr);</span><br><span class="line"><span class="comment">//这是一段js函数的调用的代码，$result就是我们想要的数据</span></span><br><span class="line"><span class="keyword">echo</span> $_GET[<span class="string">'callback'</span>].<span class="string">"($result)"</span>;</span><br></pre></td></tr></table></figure><p>javascript代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.querySelector(<span class="string">"button"</span>);</span><br><span class="line">button.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">  script.src = <span class="string">"http://www.api.com/testjs.php?callback=fun"</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>说白了，jsonp的原理就是 借助了script标签 src 请求资源时, 不受同源策略的限制.</li><li>在服务端返回一个函数的调用，将数据当前调用函数的实参。</li><li>在浏览器端，需要程序要声明一个全局函数，通过形参就可以获取到服务端返回的对应的值</li></ol><p>jsonp原理大家需要知道，但不用太过于去纠结这个原理，因为jquery已经帮我们封装好了，我们使用起来非常的方便。</p><h3 id="jquery对于jsonp的封装"><a href="#jquery对于jsonp的封装" class="headerlink" title="jquery对于jsonp的封装"></a>jquery对于jsonp的封装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用起来相当的简单，跟普通的get请求没有任何的区别，只需要把dataType固定成jsonp即可。</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">  type:<span class="string">"get"</span>,</span><br><span class="line">  url:<span class="string">"http://www.Jepson.com/testjs.php"</span>,</span><br><span class="line">  dataType:<span class="string">"jsonp"</span>,</span><br><span class="line">  data:&#123;</span><br><span class="line">    uname:<span class="string">"Jepson"</span>,</span><br><span class="line">    upass:<span class="string">"123456"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  success:<span class="function"><span class="keyword">function</span> (<span class="params">info</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(info);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>【案例：查询天气.html】</p><p><a href="https://www.jisuapi.com/api/weather/" target="_blank" rel="noopener">天气查询api地址</a></p><p>【案例：省市区三级联动.html】</p><p><a href="https://www.jisuapi.com/api/area/" target="_blank" rel="noopener">api地址</a> </p><h1 id="XMLHttpRequest2-0"><a href="#XMLHttpRequest2-0" class="headerlink" title="XMLHttpRequest2.0"></a>XMLHttpRequest2.0</h1><blockquote><p>XMLHttpRequest是一个javascript内置对象，使得Javascript可以进行异步的HTTP通信。2008年2月，就提出了XMLHttpRequest Level 2 草案。</p></blockquote><p>老版本的XMLHttpRequest的缺点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 仅支持传输文本数据，无法传说二进制文件，比如图片视频等。</span><br><span class="line"><span class="number">2.</span> 传输数据时，没有进度信息，只能提示完成与否。</span><br><span class="line"><span class="number">3.</span> 受到了<span class="string">"同源策略"</span>的限制</span><br></pre></td></tr></table></figure><p>新版本的功能：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 可以设置timeout超时时间</span><br><span class="line"><span class="number">2.</span> 可以使用formData对象管理表单数据</span><br><span class="line"><span class="number">3.</span> 允许请求不同域名下的数据（跨域）</span><br><span class="line"><span class="number">4.</span> 支持上传二进制文件</span><br><span class="line"><span class="number">5.</span> 可以获取数据传输的进度信息</span><br></pre></td></tr></table></figure><p><strong>注意：我们现在使用new XMLHttpRequest创建的对象就是2.0对象了，我们之前学的是1.0的语法，现在学习一些2.0的新特性即可。</strong>  </p><h2 id="timeout设置超时"><a href="#timeout设置超时" class="headerlink" title="timeout设置超时"></a>timeout设置超时</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xhr.timeout = <span class="number">3000</span>;<span class="comment">//设置超时时间</span></span><br><span class="line">xhr.ontimeout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">"请求超时"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="formData管理表单数据"><a href="#formData管理表单数据" class="headerlink" title="formData管理表单数据"></a>formData管理表单数据</h2><blockquote><p>formData对象类似于jquery的serialize方法，用于管理表单数据</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用特点： </span><br><span class="line"><span class="number">1.</span> 实例化一个formData对象， <span class="keyword">new</span> formData(form); form就是表单元素</span><br><span class="line"><span class="number">2.</span> formData对象可以直接作为 xhr.send(formData)的参数。注意此时数据是以二进制的形式进行传输。</span><br><span class="line"><span class="number">3.</span> formData有一个append方法，可以添加参数。formData.append(<span class="string">"id"</span>, <span class="string">"1111"</span>);</span><br><span class="line"><span class="number">4.</span> 这种方式只能以post形式传递，不需要设置请求头，浏览器会自动为我们设置一个合适的请求头。</span><br></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 使用formData必须发送post请求</span></span><br><span class="line">    xhr.open(<span class="string">"post"</span>, <span class="string">"02-formData.php"</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//2. 获取表单元素</span></span><br><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.querySelector(<span class="string">"#myForm"</span>);</span><br><span class="line"><span class="comment">//3. 创建form对象，可以直接作为send的参数。</span></span><br><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData(form);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. formData可以使用append方法添加参数</span></span><br><span class="line">formData.append(<span class="string">"id"</span>, <span class="string">"1111"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//5. 发送，不需要指定请求头，浏览器会自动选择合适的请求头</span></span><br><span class="line">xhr.send(formData);</span><br></pre></td></tr></table></figure><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><blockquote><p>以前，文件上传需要借助表单进行上传，但是表单上传是同步的，也就是说文件上传时，页面需要提交和刷新，用户体验不友好，xhr2.0中的formData对象支持文件的异步上传。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line"><span class="comment">//获取上传的文件，传递到后端</span></span><br><span class="line"><span class="keyword">var</span> file = <span class="built_in">document</span>.getElementById(<span class="string">"file"</span>).files[<span class="number">0</span>];</span><br><span class="line">formData.append(<span class="string">"file"</span>, file);</span><br><span class="line">xhr.send(formData);</span><br></pre></td></tr></table></figure><h2 id="显示文件进度信息"><a href="#显示文件进度信息" class="headerlink" title="显示文件进度信息"></a>显示文件进度信息</h2><blockquote><p>xhr2.0还支持获取上传文件的进度信息，因此我们可以根据进度信息可以实时的显示文件的上传进度。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 需要注册 xhr.upload.onprogress = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;&#125; 事件，用于监听文件上传的进度.注意：需要在send之前注册。</span><br><span class="line"><span class="number">2.</span> 上传的进度信息会存储事件对象e中</span><br><span class="line"><span class="number">3.</span> e.loaded表示已上传的大小   e.total表示整个文件的大小</span><br></pre></td></tr></table></figure><p>代码参考：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xhr.upload.onprogress = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">  inner.style.width = (e.loaded/e.total*<span class="number">100</span>).toFixed(<span class="number">2</span>)+<span class="string">"%"</span>;</span><br><span class="line">  span.innerHTML = (e.loaded/e.total*<span class="number">100</span>).toFixed(<span class="number">2</span>)+<span class="string">"%"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xhr.send(formData);</span><br></pre></td></tr></table></figure><p>如果上传文件超过8M，php会报错，需要进行设置，允许php上传大文件。</p><h2 id="跨域资源共享-CORS-兼容性IE10"><a href="#跨域资源共享-CORS-兼容性IE10" class="headerlink" title="跨域资源共享(CORS) ( 兼容性IE10+ )"></a>跨域资源共享(CORS) ( 兼容性IE10+ )</h2><h3 id="cors的使用"><a href="#cors的使用" class="headerlink" title="cors的使用"></a>cors的使用</h3><blockquote><p>新版本的XMLHttpRequest对象，可以向不同域名的服务器发出HTTP请求。这叫做<a href="http://en.wikipedia.org/wiki/Cross-Origin_Resource_Sharing" target="_blank" rel="noopener">“跨域资源共享”</a>（Cross-origin resource sharing，简称CORS）。</p></blockquote><p>跨域资源共享（CORS）的前提</p><ul><li>浏览器支持这个功能( 兼容性IE10+ )</li><li>服务器必须允许这种跨域。</li></ul><p>服务器允许跨域的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//允许所有的域名访问这个接口</span></span><br><span class="line">header(<span class="string">"Access-Control-Allow-Origin:*"</span>);</span><br><span class="line"><span class="comment">//允许www.study.com这个域名访问这个接口</span></span><br><span class="line">header(<span class="string">"Access-Control-Allow-Origin:http://www.study.com"</span>);</span><br></pre></td></tr></table></figure><h3 id="CORS的具体流程（了解）"><a href="#CORS的具体流程（了解）" class="headerlink" title="CORS的具体流程（了解）"></a>CORS的具体流程（了解）</h3><ol><li><p>浏览器发送跨域请求</p></li><li><p>服务器端收到一个跨域请求后，在响应头中添加Access-Control-Allow-Origin Header资源权限配置。发送响应</p></li><li><p>浏览器收到响应后，查看是否设置了<code>header(&#39;Access-Control-Allow-Origin:请求源域名或者*&#39;);</code></p><p>如果当前域已经得到授权，则将结果返回给<a href="http://lib.csdn.net/base/javascript" target="_blank" rel="noopener">JavaScript</a>。否则浏览器忽略此次响应。</p></li></ol><p>结论：</p><ol><li><strong>跨域行为是浏览器行为，响应式回来了的, 只是浏览器安全机制做了限制,  对于跨域响应内容进行了忽略。</strong></li><li><strong>服务器与服务器之间是不存在跨域的问题的</strong></li></ol><h3 id="jsonp与cors的对比"><a href="#jsonp与cors的对比" class="headerlink" title="jsonp与cors的对比"></a>jsonp与cors的对比</h3><ul><li>jsonp兼容性好，老版本浏览器也支持，但是jsonp仅支持get请求，发送的数据量有限。使用麻烦</li><li>cors需要浏览器支持cors功能才行。但是使用简单，<strong>只要服务端设置允许跨域，对于客户端来说，跟普通的get、post请求并没有什么区别。</strong></li><li>跨域的安全性问题：<strong>因为跨域是需要服务端配合控制的</strong> ，也就是说不论jsonp还是cors，如果没有服务端的允许，浏览器是没法做到跨域的。</li></ul><p>【案例：图灵机器人】</p><h3 id="其他的跨域手段"><a href="#其他的跨域手段" class="headerlink" title="其他的跨域手段"></a>其他的跨域手段</h3><p>以下方式基本不用啊，了解即可：</p><p>1、顶级域名相同的可以通过domain.name来解决，即同时设置 domain.name = 顶级域名（如example.com）<br>2、document.domain + iframe<br>3、window.name + iframe<br>4、location.hash + iframe<br>5、window.postMessage()</p><p><a href="http://rickgray.me/2015/09/03/solutions-to-cross-domain-in-browser.html" target="_blank" rel="noopener">其他跨域方式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;http-协议&quot;&gt;&lt;a href=&quot;#http-协议&quot; class=&quot;headerlink&quot; title=&quot;http 协议&quot;&gt;&lt;/a&gt;http 协议&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;HTTP协议，即超文本传输协议(Hypertext transfer pr
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript内置对象</title>
    <link href="http://yoursite.com/2019/06/03/JavaScript%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2019/06/03/JavaScript%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</id>
    <published>2019-06-02T16:00:00.000Z</published>
    <updated>2020-04-28T02:28:46.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><blockquote><p>JS内置对象就是指Javascript自带的一些对象，供开发者使用，这些对象提供了一些常用的的功能。</p><p>常见的内置对象有Math、String、Array、Date等</p></blockquote><p>内置对象有很多，我们主要是记下这些内置对象的用法即可。但是同学们也不可能一下子记住这么多的方法，因此当同学们忘了某个方法该如何使用的时候，可以上网查看。</p><h2 id="如何学习一个方法-？"><a href="#如何学习一个方法-？" class="headerlink" title="如何学习一个方法 ？"></a>如何学习一个方法 ？</h2><ol><li>方法的功能</li><li>参数的意义和<strong>类型</strong> </li><li>返回值意义和<strong>类型</strong></li><li>demo进行测试</li></ol><h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><blockquote><p>Math对象中封装很多与数学相关的属性和方法。</p></blockquote><ul><li><p>π</p><p><code>Math.PI</code></p></li><li><p>最大值/最小值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Math.max();</span><br><span class="line">Math.min();</span><br></pre></td></tr></table></figure></li><li><p>取整（★）  [1.1 , 1.9,  -1.1 , -1.9  ,  1.5]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.ceil();<span class="comment">//天花板，向上取整</span></span><br><span class="line"><span class="built_in">Math</span>.floor();<span class="comment">//地板，向下取整</span></span><br><span class="line"><span class="built_in">Math</span>.round();<span class="comment">//四舍五入，如果是.5，则取更大的那个数</span></span><br></pre></td></tr></table></figure></li><li><p>随机数（★★）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.random();<span class="comment">//返回一个[0,1)之间的数，能取到0，取不到1/';.'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一般情况看下,我们不是要求随机小数,一般整数,例如速记点名</span></span><br></pre></td></tr></table></figure></li><li><p>绝对值    (abs absolute 绝对)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.abs();<span class="comment">//求绝对值</span></span><br></pre></td></tr></table></figure></li><li><p>次幂和平方    (pow power 幂   sqrt:开方 )</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.pow(num, power);<span class="comment">//求num的power次方</span></span><br><span class="line"><span class="built_in">Math</span>.sqrt(num);<span class="comment">//对num开平方</span></span><br></pre></td></tr></table></figure></li><li><p>练习</p></li></ul>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.   0-3的随机整数 </span></span><br><span class="line"><span class="comment">//     0-6的随机整数</span></span><br><span class="line"><span class="comment">//     6-8的随机整数</span></span><br><span class="line"><span class="number">0</span><span class="number">-2</span> +<span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.封装一个函数 随机生成一个rgb颜色？</span></span><br><span class="line"><span class="comment">//2.1 0-255 取整</span></span><br><span class="line"><span class="comment">//2.2 </span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">randomRGB</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> red = <span class="built_in">parseInt</span>( <span class="built_in">Math</span>.random() * <span class="number">256</span> );</span><br><span class="line">        <span class="keyword">var</span> green = <span class="built_in">parseInt</span>( <span class="built_in">Math</span>.random() * <span class="number">256</span> );</span><br><span class="line">        <span class="keyword">var</span> blue = <span class="built_in">parseInt</span>( <span class="built_in">Math</span>.random() * <span class="number">256</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// return 'rgb(20,30,43)'</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'rgb('</span>+ red + <span class="string">','</span> + green + <span class="string">','</span> + blue + <span class="string">')'</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h2><blockquote><p>Date对象用来处理日期和时间</p></blockquote><ul><li><p>创建一个日期对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//使用构造函数创建一个当前时间的对象</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2017-03-22"</span>);<span class="comment">//创建一个指定时间的日期对象</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2017-03-22 00:52:34"</span>);<span class="comment">//创建一个指定时间的日期对象</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">2</span>, <span class="number">22</span>, <span class="number">0</span>, <span class="number">52</span>, <span class="number">34</span>);<span class="number">0</span><span class="number">-11</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1523199394644</span>);<span class="comment">//参数：毫秒值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Date</span>构造函数的参数</span><br><span class="line"><span class="number">1.</span> 毫秒数 <span class="number">1498099000356</span><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1498099000356</span>)</span><br><span class="line"><span class="number">2.</span> 日期格式字符串  <span class="string">'2015-5-1'</span> <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2015-5-1'</span>)</span><br><span class="line"><span class="number">3.</span> 年、月、日…… <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">2</span>, <span class="number">22</span>, <span class="number">0</span>, <span class="number">52</span>, <span class="number">34</span>);月份从<span class="number">0</span>开始</span><br></pre></td></tr></table></figure></li><li><p>日期格式化(了解)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">date.toLocalString();<span class="comment">//本地风格的日期格式</span></span><br><span class="line">date.toLocaleDateString(); <span class="comment">// 获取日期</span></span><br><span class="line">date.toLocaleTimeString(); <span class="comment">// 获取时间</span></span><br></pre></td></tr></table></figure></li><li><p>获取日期的指定部分 (★)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">getMilliseconds();<span class="comment">//获取毫秒值</span></span><br><span class="line">getSeconds();<span class="comment">//获取秒</span></span><br><span class="line">getMinutes();<span class="comment">//获取分钟</span></span><br><span class="line">getHours();<span class="comment">//获取小时</span></span><br><span class="line">getDay();<span class="comment">//获取星期，0-6    0：星期天</span></span><br><span class="line">getDate();<span class="comment">//获取日，即当月的第几天</span></span><br><span class="line">getMonth();<span class="comment">//返回月份，注意从0开始计算，这个地方坑爹，0-11</span></span><br><span class="line">getFullYear();<span class="comment">//返回4位的年份  如 2016</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//思考：</span></span><br><span class="line"><span class="comment">//封装一个函数，返回当前的时间，格式是：yyyy-MM-dd HH:mm:ss  (2018-01-01 01:20:12)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getD</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> year = date.getFullYear();</span><br><span class="line">  <span class="keyword">var</span> month =  date.getMonth() + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> day = date.getDate();</span><br><span class="line">  <span class="keyword">var</span> h = date.getHours();</span><br><span class="line">  <span class="keyword">var</span> m = date.getMinutes();</span><br><span class="line">  <span class="keyword">var</span> s = date.getSeconds();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">addZero</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> num &lt; <span class="number">10</span> ? <span class="string">'0'</span>+num : num;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> year+ <span class="string">'-'</span>+ addZero(month) +<span class="string">'-'</span>+  addZero(day) +<span class="string">' '</span>+  addZero(h) +<span class="string">':'</span> +  addZero(m) + <span class="string">':'</span> +  addZero(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>时间戳</p></li><li><blockquote><p>实际项目中,用的最多的就是时间戳,,因为这个好计算,其他的都不好算</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = +<span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//1970年01月01日00时00分00秒起至现在的总毫秒数</span></span><br><span class="line">  <span class="comment">//思考</span></span><br><span class="line">  <span class="comment">//如何统计一段代码的执行时间？  打印1000次</span></span><br><span class="line">  <span class="comment">// 开始 </span></span><br><span class="line">  <span class="keyword">var</span> start = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">1</span> ; i &lt;= <span class="number">1000</span> ; i++) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 结束</span></span><br><span class="line">  <span class="keyword">var</span> end = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'时间戳 :'</span> + (end-start));</span><br></pre></td></tr></table></figure></li></ul><h2 id="Array对象"><a href="#Array对象" class="headerlink" title="Array对象"></a>Array对象</h2><blockquote><p>数组对象在javascript中非常的常用</p></blockquote><ul><li><p>数组转换（★）— <strong>join</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法：array.join(分隔符)</span></span><br><span class="line"><span class="comment">//作用：将数组的值拼接成字符串,并且返回字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.join();<span class="comment">//不传参数，默认按【,】进行拼接</span></span><br><span class="line">arr.join(<span class="string">""</span>);<span class="comment">//按【"】进行拼接</span></span><br><span class="line">arr.join(<span class="string">"-"</span>);<span class="comment">//按【-】进行拼接</span></span><br></pre></td></tr></table></figure></li><li><p>数组的增删操作（★）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> arr = [<span class="string">'zs'</span>,<span class="string">'ls'</span>,<span class="string">'ww'</span>]</span><br><span class="line"></span><br><span class="line">  array.push(元素);<span class="comment">//从后面添加元素，返回新数组的length</span></span><br><span class="line">  array.pop();<span class="comment">//从数组的后面删除元素，返回删除的那个元素</span></span><br><span class="line">  array.unshift(元素);<span class="comment">//从数组的前面的添加元素，返回新数组的长度</span></span><br><span class="line">  array.shift();<span class="comment">//从数组的最前面删除元素，返回删除的那个元素</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//练习1</span></span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="string">"刘备"</span>];</span><br><span class="line">  <span class="comment">//添加数据后变成：["赵云","马超","刘备","关羽","张飞"]</span></span><br><span class="line">  <span class="comment">//删除数据后变成：["关羽","张飞"]</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//练习2</span></span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="string">"赵云"</span>,<span class="string">"马超"</span>,<span class="string">"刘备"</span>,<span class="string">"关羽"</span>,<span class="string">"张飞"</span>];</span><br><span class="line"><span class="comment">//把数组的最后一个元素变成数组的第一个元素</span></span><br><span class="line">  <span class="comment">//把数组的第一个元素变成数组的最后一个元素</span></span><br></pre></td></tr></table></figure></li><li><p>数组的翻转与排序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">array.reverse();<span class="comment">//翻转数组</span></span><br><span class="line">array.sort();<span class="comment">//数组的排序，默认按照 字母/首字符 顺序排序 =&gt; 1 11 2 3</span></span><br><span class="line"><span class="keyword">var</span> arr1 =  [<span class="string">'a'</span>,<span class="string">'d'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">2</span>,<span class="number">11</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//sort方法可以传递一个函数作为参数，这个参数用来控制数组如何进行排序</span></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//如果返回值&gt;0,则交换位置</span></span><br><span class="line">  <span class="keyword">return</span> a - b;<span class="comment">//b-a</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">记忆 : b比a高</span><br></pre></td></tr></table></figure></li></ul>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//思考：</span></span><br><span class="line"> <span class="comment">//将[3, 6, 1, 5, 10, 2,11]从小到大排列</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">2</span>,<span class="number">11</span>];</span><br><span class="line"></span><br><span class="line"> <span class="comment">//将学生数组按照年龄从大到小排列</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">18</span>,<span class="number">34</span>,<span class="number">21</span>,<span class="number">20</span>,<span class="number">66</span>];</span><br></pre></td></tr></table></figure><ul><li><p>数组的拼接与截取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. concat：数组合并，不会影响原来的数组，会返回一个新数组。</span></span><br><span class="line"><span class="keyword">var</span> newArray = array.concat(array2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. slice:截取出来，既然是截取`出来`,,肯定要有个东西接收</span></span><br><span class="line"><span class="comment">//原来的数组不受影响，</span></span><br><span class="line"><span class="comment">// - slice() 全部截取出来</span></span><br><span class="line"><span class="comment">// - slice(begin) 从第begin往后截取出来</span></span><br><span class="line"><span class="comment">// - slice(begin, end) 从第begin开始删除,,不包括end   [start, end)</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'zs'</span>,<span class="string">'ls'</span>,<span class="string">'ww'</span>,<span class="string">'zl'</span>,<span class="string">'xmg'</span>];</span><br><span class="line"><span class="keyword">var</span> newArray = array.slice(begin, end);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. splice : 数组任意地方删除或者添加元素    无返回值</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'zs'</span>,<span class="string">'ls'</span>,<span class="string">'ww'</span>,<span class="string">'zl'</span>,<span class="string">'xmg'</span>];</span><br><span class="line"><span class="comment">// 原来的数组影响</span></span><br><span class="line"><span class="comment">//- splice(start, deletedCount)   删除元素</span></span><br><span class="line"><span class="comment">// - start 开始</span></span><br><span class="line"><span class="comment">// - deletedCount 删除个数</span></span><br><span class="line"><span class="comment">//- splice(start, deletedCount , item) 删除+添加,  第三个参数是在原来删除的位置上新加几个元素</span></span><br><span class="line"><span class="comment">//- 特殊 : </span></span><br><span class="line"><span class="comment">//   splice(start, 0 , item)   就是在某个位置新加元素</span></span><br></pre></td></tr></table></figure><p>//练习：<br>var arr = [“赵云”,”马超”,”刘备”,”关羽”,”张飞”];<br>//截取[“刘备”,”关羽”]<br>//在刘备前面增加 马腾<br>//删除关羽</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></li><li><p>数组查找元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//indexOf方法用来查找数组中某个元素 `第一次`出现的位置，如果找不到，返回-1</span></span><br><span class="line">array.indexOf(search, [fromIndex]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//lastIndexOf()方法用来查找数组中某个元素 `最后一次`出现的位置,如果找不到，返回-1</span></span><br><span class="line">array.lastIndexOf(search, [fromIndex]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">主要配合<span class="keyword">if</span>语句的多</span><br></pre></td></tr></table></figure></li><li><p>清空数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. array.splice(0,array.length);//删除数组中所有的元素</span></span><br><span class="line"><span class="comment">//2．array.length = 0;//直接修改数组的长度</span></span><br><span class="line"><span class="comment">//3．array = [];//将数组赋值为一个空数组，推荐</span></span><br></pre></td></tr></table></figure></li><li><p>数组综合练习</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"c"</span>, <span class="string">"a"</span>, <span class="string">"z"</span>, <span class="string">"a"</span>, <span class="string">"x"</span>, <span class="string">"a"</span>, <span class="string">"a"</span>, <span class="string">"z"</span>, <span class="string">"c"</span>, <span class="string">"x"</span>, <span class="string">"a"</span>, <span class="string">"x"</span>]</span><br><span class="line"><span class="comment">//1. 找到数组中第一个a出现的位置 //1</span></span><br><span class="line"><span class="comment">//2. 找到数组中最后一个a出现的位置 //10</span></span><br><span class="line"><span class="comment">//3. 找到数组中每一个a出现的位置 //[1,3,5,6,10]</span></span><br><span class="line"><span class="comment">//4. 数组去重，返回一个新数组</span></span><br><span class="line"><span class="comment">//5. 获取数组中每个元素出现的次数</span></span><br><span class="line"><span class="comment">// 新方法 :  if(arr[i] in obj) &#123;&#125; 判断元素是否在对象中</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; arr.length ; i++) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (arr[i] <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        obj[arr[i]] += <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        obj[arr[i]] = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure></li></ul><h3 id="Number对象"><a href="#Number对象" class="headerlink" title="Number对象"></a>Number对象</h3><blockquote><p>Number对象是数字的包装类型，数字可以直接使用这些方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toFixed(<span class="number">2</span>)<span class="comment">//保留2位小数</span></span><br><span class="line">toString();<span class="comment">//转换成字符串</span></span><br></pre></td></tr></table></figure><h3 id="Boolean对象"><a href="#Boolean对象" class="headerlink" title="Boolean对象"></a>Boolean对象</h3><blockquote><p>Boolean对象是布尔类型的包装类型。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toString( );<span class="comment">//转换成字符串</span></span><br></pre></td></tr></table></figure><p><strong>undefined和null没有包装类型，所以调用toString方法会报错</strong></p><h3 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h3><blockquote><p>字符串可以看成是一个字符数组（伪数组）。因此字符串也有长度，也可以进行遍历。String对象很多方法的名字和和Array的一样。可以少记很多的单词。</p><p>注意: 注意 : 操作字符串的方法都不会改变原来的字符串,,所以需要返回</p></blockquote><ul><li><p>查找指定字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//indexOf:获取某个字符串第一次出现的位置，如果没有，返回-1</span></span><br><span class="line"><span class="comment">//lastIndexOf:获取某个字符串最后一次出现的位置。如果没有，返回-1</span></span><br></pre></td></tr></table></figure></li><li><p>去除空白</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trim();<span class="comment">//去除字符串两边的空格，内部空格不会去除</span></span><br></pre></td></tr></table></figure></li><li><p>大小写转换</p></li></ul>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//toUpperCase：全部转换成大写字母</span></span><br><span class="line"><span class="comment">//toLowerCase：全部转换成小写字母</span></span><br></pre></td></tr></table></figure><ul><li><p>字符串拼接与截取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串拼接</span></span><br><span class="line"><span class="comment">//可以用concat，用法与数组一样，但是字符串拼串我们一般都用+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//`字符串截取`的方法有很多，记得越多，越混乱，因此就记好用的就行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//slice ：截取出来 从start开始，end结束，并且取不到end。 `和 substring一样`</span></span><br><span class="line"><span class="comment">//substring ：从start开始，end结束，并且取不到end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//substr ： ：从start开始，截取length个字符。 == 数组的 splice()</span></span><br><span class="line"></span><br><span class="line">总结 :优先使用 substr</span><br></pre></td></tr></table></figure></li><li><p>字符串切割</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//split:将字符串分割成数组（很常用）</span></span><br><span class="line"><span class="comment">//功能和数组的join正好相反。</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"张三,李四,王五"</span>;</span><br><span class="line"><span class="keyword">var</span> arr = str.split(<span class="string">","</span>);</span><br></pre></td></tr></table></figure></li><li><p>字符串替换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abcedabc'</span></span><br><span class="line">str = str.replace(<span class="regexp">/a/g</span>,<span class="string">'c'</span>)</span><br><span class="line">replace(searchValue, replaceValue)  <span class="comment">//  replace(old, new)</span></span><br><span class="line"><span class="comment">//参数：searchValue:需要替换的值    replaceValue:用来替换的值</span></span><br></pre></td></tr></table></figure></li><li><p>遍历、获取</p></li><li><pre><code class="js"><span class="keyword">var</span>  str1 = <span class="string">'abcoefoxyozzopp'</span><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; str1.length ; i++) {    <span class="built_in">console</span>.log(str1[i]==<span class="string">' '</span>);}str[<span class="number">0</span>] == str.charAt(<span class="number">0</span>)&lt;!--￼<span class="number">27</span>--&gt;</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;内置对象&quot;&gt;&lt;a href=&quot;#内置对象&quot; class=&quot;headerlink&quot; title=&quot;内置对象&quot;&gt;&lt;/a&gt;内置对象&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;JS内置对象就是指Javascript自带的一些对象，供开发者使用，这些对象提供了一些常用的的功能
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript进阶--02</title>
    <link href="http://yoursite.com/2019/05/22/JavaScript%E8%BF%9B%E9%98%B6--02/"/>
    <id>http://yoursite.com/2019/05/22/JavaScript%E8%BF%9B%E9%98%B6--02/</id>
    <published>2019-05-21T16:00:00.000Z</published>
    <updated>2020-04-28T02:28:28.686Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li>了解</li></ul><pre><code> 重新认识instanceof- 原型链不可变- for..in的问题</code></pre><ul><li><p>重点</p></li><li><p>重点</p><ul><li><p>上下文调用模式</p></li><li><p>js中的继承</p></li><li><p>闭包</p></li></ul></li></ul><h2 id="1-重新认识instanceof"><a href="#1-重新认识instanceof" class="headerlink" title="1. 重新认识instanceof"></a>1. 重新认识instanceof</h2><p>js基础阶段对instanceof作用的描述 : <strong>判断一个对象是否是某个构造函数的实例</strong></p><p>现在我们学习了原型,也学习了原型链,所以我们现在可以更严谨的描述他的作用:</p><p><strong>判断一个函数的原型对象,是否在实例对象的原型链上</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Object</span>);  <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="2-原型链不可变"><a href="#2-原型链不可变" class="headerlink" title="2. 原型链不可变"></a>2. 原型链不可变</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(p1 <span class="keyword">instanceof</span> Person); <span class="comment">// ?</span></span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span> : Person,</span><br><span class="line">    a : 1</span><br><span class="line">&#125;</span><br><span class="line">console.log(p1 instanceof Person); // ?</span><br><span class="line">var p2 = new Person();</span><br><span class="line">console.log(p2 instanceof Person); // ?</span><br></pre></td></tr></table></figure> class="lazyload" data-src="/2019/05/22/JavaScript%E8%BF%9B%E9%98%B6--02/原型链不可变.png" <img src="/"><p>##3. 上下文调用函数</p><h3 id="3-1-回顾之前我们学习的调用函数的几种方式"><a href="#3-1-回顾之前我们学习的调用函数的几种方式" class="headerlink" title="3.1 回顾之前我们学习的调用函数的几种方式"></a>3.1 回顾之前我们学习的调用函数的几种方式</h3><ul><li><p>普通调用</p><blockquote><p>this – &gt; window</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);  <span class="comment">// window</span></span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure></li><li><p>对象调用</p><blockquote><p>this – &gt; obj</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// obj</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    f : fn</span><br><span class="line">&#125;;</span><br><span class="line">obj.f();</span><br></pre></td></tr></table></figure></li><li><p>构造函数调用</p><blockquote><p>this – &gt; 构造函数的实例</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name; <span class="comment">//this --&gt; 实例</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'zs'</span>);</span><br></pre></td></tr></table></figure></li><li><p>定时器中的回调函数</p><blockquote><p>this – &gt; window</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>)<span class="comment">// window</span></span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure></li><li><p>事件处理函数调用</p><blockquote><p>this –&gt; 事件源</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">box.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// box</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>我们总结了一句话: this的指向是在函数调用时决定的. 谁调用这个函数,this指向谁</strong></p><h3 id="3-2-上下文调用函数的三个方法"><a href="#3-2-上下文调用函数的三个方法" class="headerlink" title="3.2 上下文调用函数的三个方法"></a>3.2 上下文调用函数的三个方法</h3><blockquote><p>为什么要学习上下文调用函数?</p><p>因为这样我们就可以随意的控制函数中this的指向</p></blockquote><h4 id="3-2-1-call方法"><a href="#3-2-1-call方法" class="headerlink" title="3.2.1  call方法"></a>3.2.1  call方法</h4><p><strong>作用:</strong> 调用该函数,并修改函数中this的指向</p><p>*<em>语法: *</em> 函数名. call(对象,[实参]);</p><p><strong>参数详解:</strong></p><p>第一个参数: 要让函数中this指向谁,就写谁</p><p>后面的参数: 被调用函数要传入的实参,以逗号分隔</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// ['a','b','c']</span></span><br><span class="line">    <span class="built_in">console</span>.log(x + y); <span class="comment">//8</span></span><br><span class="line">&#125;</span><br><span class="line">fn.call([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>], <span class="number">3</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><h4 id="3-2-2-apply-方法"><a href="#3-2-2-apply-方法" class="headerlink" title="3.2.2 apply 方法"></a>3.2.2 apply 方法</h4><p><strong>作用:</strong> 调用该函数,并修改函数中this的指向</p><p>*<em>语法: *</em> 函数名. apply(对象,数组);</p><p><strong>参数详解:</strong></p><p>第一个参数: 要让函数中this指向谁,就写谁</p><p>第二个参数: 要去传入一个数组,里面存放被调用函数需要的实参</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// &#123;a : 1&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(x + y); <span class="comment">//8</span></span><br><span class="line">&#125;</span><br><span class="line">fn.apply(&#123;<span class="attr">a</span> : <span class="number">1</span>&#125;, [<span class="number">3</span>, <span class="number">5</span>]);</span><br></pre></td></tr></table></figure><h4 id="3-2-3-bind方法"><a href="#3-2-3-bind方法" class="headerlink" title="3.2.3 bind方法"></a>3.2.3 bind方法</h4><p><strong>作用:</strong> 不调用函数,克隆一个新的函数,并修改新函数中this的指向,将新的函数返回</p><p>*<em>语法: *</em> 函数名. bind(对象[,实参]);</p><p><strong>参数详解:</strong></p><p>第一个参数: 要让函数中this指向谁,就写谁</p><p>后面的参数: 被调用函数要传入的实参,以逗号分隔</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//调用newFn时打印结果</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);  <span class="comment">//&#123;b:2&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(x + y); <span class="comment">//8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newFn = fn.bind(&#123;<span class="attr">b</span>:<span class="number">2</span>&#125;, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">newFn();</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结:"></a>小结:</h4><ul><li>call和apply 会调用函数 ,  bind不会调用函数</li><li>apply要求把实参放到数组中,然后把数组传进来</li></ul><h2 id="4-for-in的问题"><a href="#4-for-in的问题" class="headerlink" title="4. for..in的问题"></a>4. for..in的问题</h2><blockquote><p>for…in 遍历时,会把原型上的属性也遍历出来</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.type = <span class="string">'human'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> zs = <span class="keyword">new</span> Person(<span class="string">'zs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> zs)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key); <span class="comment">// name , type  把type也打印出来了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们就想打印对象自己身上的属性,可以使用hasOwnProperty方法来解决</p><p>*<em>hasOwnProperty的作用: *</em> 判断是不是对象自己的属性</p><p>*<em>hasOwnProperty的语法: *</em> 对象.hasOwnProperty(‘属性’) 是则返回true, 否则false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.type = <span class="string">'human'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> zs = <span class="keyword">new</span> Person(<span class="string">'zs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> zs)&#123;</span><br><span class="line">    <span class="keyword">if</span>(zs.hasOwnProperty(key))&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(key);   <span class="comment">//只有自己的name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##5. js中的继承</p><h3 id="5-1-为什么要学习js中的继承"><a href="#5-1-为什么要学习js中的继承" class="headerlink" title="5.1 为什么要学习js中的继承"></a>5.1 为什么要学习js中的继承</h3><p>此时我们希望stu2对象,也拥有stu1对象的class, subject这些属性,但是我们不想再重新写一遍,怎么办?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stu1 = &#123;</span><br><span class="line">    class : '三年级',</span><br><span class="line">    subject : <span class="string">'Chinese'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu2 = &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-两个对象之间的继承"><a href="#5-2-两个对象之间的继承" class="headerlink" title="5.2 两个对象之间的继承"></a>5.2 两个对象之间的继承</h3><h4 id="5-2-1-遍历对象"><a href="#5-2-1-遍历对象" class="headerlink" title="5.2.1 遍历对象"></a>5.2.1 遍历对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stu1 = &#123;</span><br><span class="line">    class : '三年级',</span><br><span class="line">    subject : <span class="string">'Chinese'</span>,</span><br><span class="line">    score : <span class="number">98</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu2 = &#123;</span><br><span class="line">    score :<span class="number">82</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过for..in遍历far</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> far)&#123;</span><br><span class="line">    stu2[key] = stu1[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stu2); <span class="comment">// 此时stu2拥有了class,score和subject .</span></span><br></pre></td></tr></table></figure><p><strong>但是以上代码书写存在一个问题 : 把score的值也继承下来了.我们希望自己有的,就不继承了.所以我们要改一下代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> far)&#123;</span><br><span class="line">    <span class="comment">//自己没有的才继承</span></span><br><span class="line">    <span class="keyword">if</span>(!stu2.hasOwnProperty(key))&#123;</span><br><span class="line">        stu2[key] = stu1[key];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这样处理解决刚才的问题,但是我们发现两个对象上面存在一样的代码.这样比较占用内存</strong></p><h4 id="5-2-2-通过create方法实现继承"><a href="#5-2-2-通过create方法实现继承" class="headerlink" title="5.2.2  通过create方法实现继承"></a>5.2.2  通过create方法实现继承</h4><blockquote><p>通过ceate方法实现继承,可以避免遍历对象方式,占用内存的问题</p></blockquote><p>*<em>create方法语法:  *</em>Object.create(参考对象) 返回一个新的对象</p><p>*<em>create方法的作用: *</em> 返回的新的对象的<code>__proto__</code> 指向参考对象  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stu1 = &#123;</span><br><span class="line">     class : '三年级',</span><br><span class="line">    subject : <span class="string">'Chinese'</span>,</span><br><span class="line">    score : <span class="number">98</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu2 = <span class="built_in">Object</span>.create(stu1);</span><br><span class="line">stu2.score = <span class="number">89</span>;</span><br><span class="line"><span class="built_in">console</span>.log(stu2.class); <span class="comment">//'三年级'</span></span><br><span class="line"><span class="built_in">console</span>.log(stu2.subject); <span class="comment">//'Chinese'</span></span><br><span class="line"><span class="built_in">console</span>.log(stu2.score); <span class="comment">//89</span></span><br><span class="line"><span class="built_in">console</span>.log(stu2.__proto__ === stu1); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="5-3-构造函数的继承"><a href="#5-3-构造函数的继承" class="headerlink" title="5.3 构造函数的继承"></a>5.3 构造函数的继承</h3><blockquote><p>我们工作中要经常创建多个具有相同属性的对象,所以经常要写构造函数.</p><p>那么构造函数创建的出来的对象该如何实现继承呢?</p></blockquote><h4 id="5-3-1-借用构造函数"><a href="#5-3-1-借用构造函数" class="headerlink" title="5.3.1 借用构造函数"></a>5.3.1 借用构造函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hello, '</span> + <span class="string">'我是'</span> + <span class="keyword">this</span>.name );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, score</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.score = score;</span><br><span class="line">    Person.call(<span class="keyword">this</span>, name, age);<span class="comment">//借用构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu = <span class="keyword">new</span> Student(<span class="string">'zs'</span>, <span class="number">18</span>, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(stu); <span class="comment">//&#123;score : 100, name : zs, age : 18&#125;</span></span><br><span class="line">stu.sayHello(); <span class="comment">//hello, 我是zs</span></span><br></pre></td></tr></table></figure><p><strong>但是我们一般不会把方法写在构造函数的函数体内,我们把方法写在函数的原型上,那么这个时候构造借用函数就无法继承方法了,我们想要继承原型上的方法.可以用原型继承</strong></p><h4 id="5-3-2-原型继承"><a href="#5-3-2-原型继承" class="headerlink" title="5.3.2 原型继承"></a>5.3.2 原型继承</h4><blockquote><p>用来继承方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hello, '</span> + <span class="string">'我是'</span> + <span class="keyword">this</span>.name );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, score</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu = <span class="keyword">new</span> Student(<span class="string">'zs'</span>, <span class="number">18</span>, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(stu); <span class="comment">//&#123;score : 100&#125;</span></span><br><span class="line">stu.sayHello(); <span class="comment">//hello, 我是undefined</span></span><br></pre></td></tr></table></figure> class="lazyload" data-src="/2019/05/22/JavaScript%E8%BF%9B%E9%98%B6--02/原型继承.png" <img src="/">  <p><strong>我们发现,方法继承下来了,但是属性却没有继承下来</strong></p><h4 id="5-3-3-组合继承"><a href="#5-3-3-组合继承" class="headerlink" title="5.3.3 组合继承"></a>5.3.3 组合继承</h4><blockquote><p>借用构造函数 + 原型继承</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hello, '</span> + <span class="string">'我是'</span> + <span class="keyword">this</span>.name );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, score</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.score = score;</span><br><span class="line">    Person.call(<span class="keyword">this</span>, name, age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu = <span class="keyword">new</span> Student(<span class="string">'zs'</span>, <span class="number">18</span>, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(stu); <span class="comment">//&#123;score : 100, name : zs, age : 18&#125;</span></span><br><span class="line">stu.sayHello(); <span class="comment">//hello, 我是zs</span></span><br></pre></td></tr></table></figure><p>##6. 闭包</p><p>*<em>概念: *</em> 函数和函数作用域的结合</p><p>*<em>通俗理解: *</em> 内部函数使用外部函数的变量, 整个外部函数形成了一个闭包</p><p>###6.1闭包的作用:</p><ol><li>私有化数据</li><li>数据保持</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> money = <span class="number">10000</span>;  <span class="comment">//放到局部作用中,防止全局变量污染(私有化数据)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        queryMoney : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> money;</span><br><span class="line">        &#125;,</span><br><span class="line">        payMoney : <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">            money -= num;</span><br><span class="line">        &#125;,</span><br><span class="line">        addMoney : <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">            money += num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> moneyManger = main();  <span class="comment">// 通过moneyManger 可以获取到局部的变量money</span></span><br></pre></td></tr></table></figure><p>###6.2闭包的缺点: </p><p>  由于内部的函数使用了外部函数的变量,导致外部这个函数无法被回收掉.如果代码中大量的存在闭包,可能会导致内存泄露 (不要刻意使用闭包);</p><h2 id="7-拓展内容"><a href="#7-拓展内容" class="headerlink" title="7.拓展内容"></a>7.拓展内容</h2><p>###7.1 函数的静态成员和实例成员</p><p>成员: 泛指属性和方法</p><p>静态成员: 函数也是对象, 函数自己的属性</p><p>实例成员: 特指构造函数时,写在构造函数体内,通过this.xxx.给实例添加的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name; <span class="comment">//实例成员</span></span><br><span class="line">    <span class="keyword">this</span>.age = age; <span class="comment">// 实例成员</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.type = <span class="string">'呵呵'</span>; <span class="comment">//静态成员</span></span><br></pre></td></tr></table></figure><h3 id="7-2-Function的原型图"><a href="#7-2-Function的原型图" class="headerlink" title="7.2.Function的原型图"></a>7.2.Function的原型图</h3><p>Functon 自己创造了自己</p><p>Object是Function的实例</p> class="lazyload" data-src="/2019/05/22/JavaScript%E8%BF%9B%E9%98%B6--02/Function原型图01.png" <img src="/">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础语法&quot;&gt;&lt;a href=&quot;#基础语法&quot; class=&quot;headerlink&quot; title=&quot;基础语法&quot;&gt;&lt;/a&gt;基础语法&lt;/h1&gt;&lt;h2 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript进阶--01</title>
    <link href="http://yoursite.com/2019/05/05/JavaScript%E8%BF%9B%E9%98%B6--01/"/>
    <id>http://yoursite.com/2019/05/05/JavaScript%E8%BF%9B%E9%98%B6--01/</id>
    <published>2019-05-04T16:00:00.000Z</published>
    <updated>2020-04-28T02:28:17.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li>了解</li></ul><ul><li>回顾js基础  变量/数据类型/顺序结构/数组</li><li>构造函数创建对象存在的问题</li></ul><ul><li><p>重点</p><ul><li><p>知道函数有原型对象</p></li><li><p>构造函数,原型对象和实例三者的关系</p></li><li><p>原型链</p></li><li><p>会给内置的对象添加自定义的方法</p></li><li><p>会使用更简单的原型使用方式</p></li></ul></li></ul><h2 id="1-回顾"><a href="#1-回顾" class="headerlink" title="1. 回顾"></a>1. 回顾</h2><h3 id="1-1-作用域"><a href="#1-1-作用域" class="headerlink" title="1.1 作用域:"></a>1.1 作用域:</h3><p>####1.1.1 全局作用域</p><p>整个js执行的环境就是一个全局作用域</p><p>####1.1.2 局部作用域</p><p>es5规范中: 只有函数才能构成一个局部作用域</p><p>####1.1.3 作用域链</p><p>将js执行时变量查找的方式,以链式形式表示出来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num1;</span><br><span class="line">    num1 = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(num1);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fnSon</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> num2 = <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(num2)</span><br><span class="line">        <span class="built_in">console</span>.log(num1)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将上面的代码用链式的形式展示出来</p><h3 id="1-2-词法作用域规则"><a href="#1-2-词法作用域规则" class="headerlink" title="1.2 词法作用域规则"></a>1.2 词法作用域规则</h3><blockquote><p>词法作用域又叫静态作用域. </p></blockquote><ul><li><p>作用域是在代码书写完毕之后就形成了,与代码执行无关</p></li><li><p>内部作用域可以访问外部作用域的变量,但是外部不可以访问内部的</p></li><li><p>函数的形参就相当于在当前函数的作用域中申明了这个变量</p></li><li><p>访问变量时,先在自己的作用域中查找,如果没有则沿着作用域链往上找,直到全局.如果全局也没有就报错</p> class="lazyload" data-src="/2019/05/05/JavaScript%E8%BF%9B%E9%98%B6--01/%E6%8A%A5%E9%94%991.png" <img src="/"></li><li><p>给变量赋值之前,要先找变量.查找变量也是沿着作用域链查找,直到全局,如果全局也没有,则会再全局作用域创建这个变量(隐式全局)</p></li><li><p>代码执行之前先考虑预解析规则,调用函数时,执行函数里的代码之前,函数内也要先执行预解析规则</p></li></ul><p>###真实面试题:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"a"</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">alert(a);  <span class="comment">//</span></span><br><span class="line"><span class="comment">//=============================================</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> foo</span><br><span class="line">    <span class="keyword">if</span> (!foo) &#123;</span><br><span class="line">        foo = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    alert(foo); <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"> bar();</span><br><span class="line"><span class="comment">//================================================</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num); <span class="comment">//  </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">456</span>;</span><br><span class="line">    f1(num);</span><br><span class="line">&#125;</span><br><span class="line">f2();</span><br><span class="line"></span><br><span class="line"><span class="comment">//======================================================</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">1</span>, c = <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> fn();</span><br><span class="line"> <span class="built_in">console</span>.log(c); <span class="comment">//</span></span><br><span class="line"> <span class="built_in">console</span>.log(b); <span class="comment">//</span></span><br><span class="line"> <span class="built_in">console</span>.log(a); <span class="comment">//</span></span><br><span class="line">  </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> a = b = c = <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line">     b=<span class="number">1</span>;</span><br><span class="line">     c=<span class="number">1</span></span><br><span class="line"> &#125;</span><br><span class="line"> fn1();</span><br><span class="line"> <span class="built_in">console</span>.log(c); <span class="comment">//</span></span><br><span class="line"> <span class="built_in">console</span>.log(b); <span class="comment">//</span></span><br><span class="line"> <span class="built_in">console</span>.log(a); <span class="comment">//</span></span><br><span class="line"><span class="comment">//========================================================</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fnSon</span>(<span class="params">a</span>)</span>&#123;<span class="comment">//形参+</span></span><br><span class="line">        <span class="keyword">var</span> a</span><br><span class="line">        a = <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(a); <span class="comment">//3</span></span><br><span class="line">    &#125;</span><br><span class="line">    fnSon();</span><br><span class="line">    <span class="built_in">console</span>.log(a);  <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">// 1</span></span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//==========================================================</span></span><br><span class="line"><span class="keyword">var</span> a ;   </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'呵呵'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        a = <span class="number">4</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'哈哈'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    a();</span><br><span class="line">    <span class="built_in">console</span>.log(a);  <span class="comment">//4</span></span><br><span class="line">&#125;</span><br><span class="line">a();</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//f</span></span><br><span class="line"><span class="comment">//=================================================================</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    a++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//==================================================================</span></span><br><span class="line"> <span class="keyword">var</span> a = &#123; <span class="attr">x</span> : <span class="number">1</span> &#125;</span><br><span class="line"> <span class="keyword">var</span> b = a;</span><br><span class="line"> a.x = a = &#123; <span class="attr">n</span> : <span class="number">1</span>&#125;; </span><br><span class="line"> <span class="built_in">console</span>.log(a.x); <span class="comment">//</span></span><br><span class="line"> <span class="built_in">console</span>.log(b.x); <span class="comment">//</span></span><br></pre></td></tr></table></figure><p>###1.3. 创建对象的方式</p><p>####1.3.1 简单方式</p><p>我们可以直接通过 <code>new Object()</code> 创建：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>() </span><br><span class="line">person.name = <span class="string">'Jack'</span>;</span><br><span class="line">person.age = <span class="number">18</span>;</span><br><span class="line">person.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);   <span class="comment">//jack</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次创建通过 <code>new Object()</code> 比较麻烦，所以可以通过它的简写形式对象字面量来创建：</p><blockquote><p>字面量形式的创建方式,底层也是new Object创建出来的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">'Jack'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的写法比较简单，但是如果我们要创建多个person对象呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  name: <span class="string">'Jack'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = &#123;</span><br><span class="line">  name: <span class="string">'Mike'</span>,</span><br><span class="line">  age: <span class="number">16</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person3 = &#123;</span><br><span class="line">  name: <span class="string">'zs'</span>,</span><br><span class="line">  age: <span class="number">17</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的代码我们不难看出，这样写的代码太过冗余。</p><p>####1.3.2 简单方式的改进：工厂函数</p><p>我们可以写一个函数，解决代码重复问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name: name,</span><br><span class="line">    age: age,</span><br><span class="line">    sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后生成对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = createPerson(<span class="string">'Jack'</span>, <span class="number">18</span>);</span><br><span class="line">p1.sayName(); <span class="comment">//jack</span></span><br><span class="line"><span class="keyword">var</span> p2 = createPerson(<span class="string">'Mike'</span>, <span class="number">18</span>);</span><br><span class="line">p2.sayName(); <span class="comment">// Mike</span></span><br></pre></td></tr></table></figure><p>####1.3.3 更优雅的方式(更推荐使用的一种方式)：构造函数</p><p>一种更优雅的工厂函数就是下面这样，构造函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">18</span>);</span><br><span class="line">p1.sayName() <span class="comment">// =&gt; Jack</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Mike'</span>, <span class="number">23</span>);</span><br><span class="line">p2.sayName() <span class="comment">// =&gt; Mike</span></span><br></pre></td></tr></table></figure><p><strong>构造函数中new关键字做了4件事:</strong></p><ol><li>创建一个新对象</li><li>让 this 就指向了这个新对象</li><li>执行构造函数中的代码</li><li>返回新对象</li></ol><h2 id="2-构造函数的问题"><a href="#2-构造函数的问题" class="headerlink" title="2. 构造函数的问题"></a>2. 构造函数的问题</h2><blockquote><p>使用构造函数带来的最大的好处就是创建对象更方便了，但是其本身也存在一个浪费内存的问题：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello '</span> + <span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'Tom'</span>, <span class="number">18</span>); &#123;name,age,sayHello&#125;</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">16</span>);</span><br></pre></td></tr></table></figure><p>以上代码的图示:</p> class="lazyload" data-src="/2019/05/05/JavaScript%E8%BF%9B%E9%98%B6--01/:构造函数的问题.png" <img src="/"><p>通过上面的图示,我们发现,每一个对象都引用了一个函数,我们创建了多少个对象,对应的就会在内存中创建出对应数量的一样的函数.这样造成了内存的极大浪费</p><p>##3 解决构造函数浪费内存的方法:</p><p>###3.1 把对象的行为定义在构造函数外面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.sayHello = say;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'hello '</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'Tom'</span>, <span class="number">18</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">16</span>);</span><br><span class="line">p1.sayHello(); <span class="comment">// hello Tom</span></span><br><span class="line">p2.sayHello(); <span class="comment">// hello Jack</span></span><br></pre></td></tr></table></figure> class="lazyload" data-src="/2019/05/05/JavaScript%E8%BF%9B%E9%98%B6--01/:解决构造函数的问题01.png" <img src="/"><p>*<em>注意: *</em>  这种方式,可以解决构造函数浪费内存的问题,但是,同时又出现了一个新的问题,我们把函数定义在了全局,</p><p>全局的函数,很容易被别人写的代码覆盖.</p><p>###3.2 利用函数的原型对象(更优雅的解决方案)</p><blockquote><p>js给每一个函数,提供了一个对应的原型对象.可以通过函数的prototype属性访问到这个原型对象.</p><p>原型对象有一个constructor的属性会指向自己对应的函数</p><p>而我们通过  <code>new 函数</code>  创建出来的实例对象,默认可以访问到函数对应的原型对象上的属性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'hello '</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'Tom'</span>, <span class="number">18</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">16</span>);</span><br><span class="line">p1.sayName(); <span class="comment">// hello Tom</span></span><br><span class="line">p2.sayName(); <span class="comment">// hello Jack</span></span><br></pre></td></tr></table></figure> class="lazyload" data-src="/2019/05/05/JavaScript%E8%BF%9B%E9%98%B6--01/:构造函数,实例,原型关系图.png" <img src="/"><p>*<em>注意: *</em>为了我们方便查看,实例和原型的关系.浏览器很贴心的帮我们实现了一个属性 <code>__proto__</code>, 通过这个属性,我们可以在控制台上清楚的看到原型.但是<code>__proto__</code>不是w3c标准的属性,所以不要在生产环境(上线)下使用.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Perosn.prototype === p1.__proto__) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="3-3-小结"><a href="#3-3-小结" class="headerlink" title="3.3 小结:"></a>3.3 小结:</h3><ul><li>利用原型对象,可以更加优雅的解决构造函数浪费内存的问题</li><li>一般对象私有的属性直接写在构造函数中,而对象公有的属性写在原型对象上</li><li>函数对应有一个自己的原型对象 , 通过prototype属性可以访问</li><li>原型对象有一个constructor属性,可以指回自己的对应的函数</li><li>通过函数new出来的实例,默认可以访问到原型对象的属性 ,我们可以通过<code>__proto__</code>在控制台看到</li></ul><h2 id="3-原型链"><a href="#3-原型链" class="headerlink" title="3. 原型链"></a>3. 原型链</h2><blockquote><p>原型对象也是对象,那么这个对象的是被谁创建出来的呢?</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype) <span class="comment">// 指向Person的原型对象</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.__proto__.constructor) <span class="comment">// 我们可以看到Person的原型对象是Object的实例</span></span><br></pre></td></tr></table></figure> class="lazyload" data-src="/2019/05/05/JavaScript%E8%BF%9B%E9%98%B6--01/:原型链.png" <img src="/"><p>从实例开始，实例默认可以访问自己构造函数的原型，这个原型也是其他构造函数的实例，也还可以访问自己的构造函数的原型，原型和原型之间连接的关系，我们称之为原型链</p><h2 id="4-js中对象属性的查找规则"><a href="#4-js中对象属性的查找规则" class="headerlink" title="4. js中对象属性的查找规则"></a>4. js中对象属性的查找规则</h2><blockquote><p>因为这个查找规则,所以Object函数原型对象上的所有属性都可以被其他对象访问到</p></blockquote><ul><li>访问对象的属性时,先在对象自己身上找,找到就直接返回</li><li>如果对象的身上没有这个属性,就会往原型上面找,如果找到就直接返回</li><li>如果原型上也没有,就往原型的原型上面找(沿着原型链一直往上找),找到就立即返回</li><li>如果最终都没有找到,则返回undefined</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Student();</span><br><span class="line">s1.toString()  <span class="comment">//[object Object]</span></span><br></pre></td></tr></table></figure><h2 id="5-内置对象的原型"><a href="#5-内置对象的原型" class="headerlink" title="5. 内置对象的原型"></a>5. 内置对象的原型</h2><ul><li><p>Array.prototype</p></li><li><p>String.prototype</p><p>…</p><p>通过观察内置函数的原型,我们发现我们在js基础阶段学习的数组/字符串常用的API,其实都定义在他们对应的原型上的.所以所有的数组对象/字符串,都能使用这些API.</p> class="lazyload" data-src="/2019/05/05/JavaScript%E8%BF%9B%E9%98%B6--01/:Array.prototype.png" <img src="/"> </li></ul><p><strong>小测试: 给数组添加一个我们自己定义的去重方法</strong></p><p>var arr=new Array(1,2,5,1,5,1)</p><p>##6. 更简单的原型使用方式</p><blockquote><p>如果我们有很多公用的属性,那么一个一个的添加在函数的原型上就比较麻烦,我们还可以有一种更简单的方式</p><p>直接新建一个对象赋值给函数的prototype属性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">constructor</span></span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: Person, // =&gt; 手动定义一个 <span class="keyword">constructor</span> 属性, 指向正确的构造函数</span><br><span class="line">  sayHello: function () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我叫'</span> + <span class="keyword">this</span>.name + <span class="string">'，我今年'</span> + <span class="keyword">this</span>.age + <span class="string">'岁了'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  eat : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃饭ing...'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'zs'</span>, <span class="number">18</span>);</span><br></pre></td></tr></table></figure> class="lazyload" data-src="/2019/05/05/JavaScript%E8%BF%9B%E9%98%B6--01/:原型的简单使用方式.png" <img src="/"> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础语法&quot;&gt;&lt;a href=&quot;#基础语法&quot; class=&quot;headerlink&quot; title=&quot;基础语法&quot;&gt;&lt;/a&gt;基础语法&lt;/h1&gt;&lt;h2 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
